install.packages("installr")
rversion()
install.packages("rversions")
rversion()
rversions()
library("rversions")
rversions()
sessionInfo()
install.packages("tidyverse")
quarto check
# Install the template packages to your R library
install.packages(c("sandpaper", "varnish", "pegboard", "tinkr"))
install.packages(c("sandpaper", "varnish", "pegboard", "tinkr"))
#Install raster and terra if not installed already
install.pacakges(c("raster", "terra"))
#Install raster and terra if not installed already
install.packages(c("raster", "terra"))
# make sure we have the needed libraries
library(sf)
library(raster)
library(ggplot2)
library(tidyverse)
#need to reload HARV_DSM
HARV_DSM <-
raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
setwd("C:/Users/kliu/Desktop/geo-r-solutions")
#need to reload HARV_DSM
HARV_DSM <-
raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
HARV_DSM_df <- as.data.frame(HARV_DSM, xy = TRUE)
names(HARV_DSM_df)[names(HARV_DSM_df) == 'HARV_dsmCrop'] <- 'Elevation'
# vector files are shapefiles
aoi_boundary_HARV <- st_read(
"data/NEON-DS-Site-Layout-Files/HARV/HarClip_UTMZ18.shp")
# there are 18 types of shapefiles.
# this one is polygons
st_geometry_type(aoi_boundary_HARV)
# and it has CRS metadata baked into it
st_crs(aoi_boundary_HARV)
# one of those pieces of data is a bounding box
# you will need these in your future life
st_bbox(aoi_boundary_HARV)
# mostly we want to make maps
# this is not a useful map
ggplot() +
geom_sf(data = aoi_boundary_HARV, size = 3, color = "black", fill = "cyan1") +
ggtitle("AOI Boundary Plot") +
coord_sf()
# Let's move on to point and line shapefiles
HARV_lines <- st_read("data/NEON-DS-Site-Layout-Files/HARV/HARV_roads.shp")
HARV_points <- st_read("data/NEON-DS-Site-Layout-Files/HARV/HARVtower_UTM18N.shp")
# that's a "spatial" "dataframe"
class(HARV_lines)
# it's got a CRS
# just like raster data does
# what's the raster version of the command?
st_crs(HARV_lines)
# bounding boxes make more sense when your
# shapefile is more than just a single rectangle
st_bbox(HARV_lines)
# call out a whole column / attribute:
HARV_lines$TYPE
# only the unique values
# but this doesn't give what you expect.
# see below
# the original fix was around line 100
levels(HARV_lines$TYPE)
# must convert that plain text to a factor
HARV_lines$TYPE <- factor(HARV_lines$TYPE)
# all this stuff works with the tidyverse
# so you can use pipes
HARV_footpath <- HARV_lines %>%
filter(TYPE == "footpath")
nrow(HARV_footpath)
head(HARV_footpath)
# now the exciting part, let's map it
ggplot() +
geom_sf(data = HARV_footpath) +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Footpaths") +
coord_sf()
ggplot() +
geom_sf(data = HARV_footpath, aes(color = factor(OBJECTID)), size = 1.5) +
labs(color = 'Footpath ID') +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Footpaths") +
coord_sf()
# challenge 1
boardwalk_HARV <- HARV_lines %>%
filter(TYPE == "boardwalk")
# there's 1 row
nrow(boardwalk_HARV)
ggplot() +
geom_sf(data = boardwalk_HARV, size = 1.5) +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Boardwalks") +
coord_sf()
# challenge 2
stoneWall_HARV <- HARV_lines %>%
filter(TYPE == "stone wall")
nrow(stoneWall_HARV)
ggplot() +
geom_sf(data = stoneWall_HARV, aes(color = factor(OBJECTID)), size = 1.5) +
labs(color = 'Wall ID') +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Stonewalls") +
coord_sf()
# this just moves on in the lesson
# but if we want to see unique values,
# we have to get that column to be a factor
levels(HARV_lines$TYPE)
# now we can see that we need 4 colors
HARV_lines$TYPE <- factor(HARV_lines$TYPE)
road_colors <- c("blue", "green", "navy", "purple")
ggplot() +
geom_sf(data = HARV_lines, aes(color = TYPE)) +
scale_color_manual(values = road_colors) +
labs(color = 'Road Type') +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Roads & Trails") +
coord_sf()
# use different line widths
line_widths <- c(1, 2, 3, 4)
ggplot() +
geom_sf(data = HARV_lines, aes(color = TYPE, size = TYPE)) +
scale_color_manual(values = road_colors) +
labs(color = 'Road Type') +
scale_size_manual(values = line_widths) +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Roads & Trails - Line width varies") +
coord_sf()
# they come out in the order they are stored,
# so you can assign in that order
levels(HARV_lines$TYPE)
line_width <- c(1, 3, 2, 6)
ggplot() +
geom_sf(data = HARV_lines, aes(size = TYPE)) +
scale_size_manual(values = line_width) +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Roads & Trails - Line width varies") +
coord_sf()
# work on that legend
ggplot() +
geom_sf(data = HARV_lines, aes(color = TYPE), size = 1.5) +
scale_color_manual(values = road_colors) +
labs(color = 'Road Type') +
ggtitle("NEON Harvard Forest Field Site",
subtitle = "Roads & Trails - Default Legend") +
coord_sf()
# change legend text and draw a box around it
ggplot() +
geom_sf(data = HARV_lines, aes(color = TYPE), size = 1.5) +
scale_color_manual(values = road_colors) +
labs(color = 'Road Type') +
theme(legend.text = element_text(size = 14),
legend.box.background = element_rect(size = 1)) +
ggtitle("NEON Harvard Forest Field Site",
subtitle = "Roads & Trails - Modified Legend") +
coord_sf()
# make the colors less obnoxious
new_colors <- c("springgreen", "blue", "magenta", "orange")
ggplot() +
geom_sf(data = HARV_lines, aes(color = TYPE), size = 1.5) +
scale_color_manual(values = new_colors) +
labs(color = 'Road Type') +
theme(legend.text = element_text(size = 14),
legend.box.background = element_rect(size = 1)) +
ggtitle("NEON Harvard Forest Field Site",
subtitle = "Roads & Trails - Pretty Colors") +
coord_sf()
# bicycle challenge
class(HARV_lines$BIKEHORSE)
# same iss ue as roadtype
levels(HARV_lines$BIKEHORSE)
levels(HARV_lines$BIKEHORSE)
HARV_lines$BIKEHORSE <- factor(HARV_lines$BIKEHORSE)
levels(HARV_lines$BIKEHORSE)
# it's not clear why we should get rid of these
lines_removeNA <- HARV_lines[!is.na(HARV_lines$BicyclesHo),]
# First, create a data frame with only those roads where bicycles and horses are allowed
lines_showHarv <- lines_removeNA %>%
filter(BicyclesHo == "Bicycles and Horses Allowed")
# Next, visualise using ggplot
ggplot() +
geom_sf(data = HARV_lines) +
geom_sf(data = lines_showHarv, aes(color = BicyclesHo), size = 2) +
scale_color_manual(values = "magenta") +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Roads Where Bikes and Horses Are Allowed") +
coord_sf()
# to stack them up, use
# multiple geom_sf
# they draw in order (ie: first line on the bottom)
ggplot() +
geom_sf(data = aoi_boundary_HARV, fill = "grey", color = "grey") +
geom_sf(data = HARV_lines, aes(color = TYPE), size = 1) +
geom_sf(data = HARV_points) +
ggtitle("NEON Harvard Forest Field Site") +
coord_sf()
# let's make a better legend
ggplot() +
geom_sf(data = aoi_boundary_HARV, fill = "grey", color = "grey") +
geom_sf(data = HARV_lines, aes(color = TYPE),
show.legend = "line", size = 1) +
geom_sf(data = HARV_points, aes(fill = Sub_Type), color = "black") +
scale_color_manual(values = road_colors) +
scale_fill_manual(values = "black") +
ggtitle("NEON Harvard Forest Field Site") +
coord_sf()
# name that legend better
ggplot() +
geom_sf(data = aoi_boundary_HARV, fill = "grey", color = "grey") +
geom_sf(data = HARV_points, aes(fill = Sub_Type)) +
geom_sf(data = HARV_lines, aes(color = TYPE), show.legend = "line",
size = 1) +
scale_color_manual(values = road_colors, name = "Line Type") +
scale_fill_manual(values = "black", name = "Tower Location") +
ggtitle("NEON Harvard Forest Field Site") +
coord_sf()
# I got this off the internet
par(font=2, mar=c(0.5,0,0,0))
y=rev(c(rep(1,6),rep(2,5), rep(3,5), rep(4,5), rep(5,5)))
x=c(rep(1:5,5),6)
plot(x, y, pch = 0:25, cex=1.5, ylim=c(1,5.5), xlim=c(1,6.5),
axes=FALSE, xlab="", ylab="", bg="blue")
text(x, y, labels=0:25, pos=3)
par(mar=oldPar$mar,font=oldPar$font )
# shape = 15 is a nice box
ggplot() +
geom_sf(data = aoi_boundary_HARV, fill = "grey", color = "grey") +
geom_sf(data = HARV_points, aes(fill = Sub_Type), shape = 15) +
geom_sf(data = HARV_lines, aes(color = TYPE),
show.legend = "line", size = 1) +
scale_color_manual(values = road_colors, name = "Line Type") +
scale_fill_manual(values = "black", name = "Tower Location") +
ggtitle("NEON Harvard Forest Field Site") +
coord_sf()
# challenge
plot_locations <- st_read("data/NEON-DS-Site-Layout-Files/HARV/PlotLocations_HARV.shp")
# we'll need to make a factor
levels(plot_locations$soilTypeOr)
plot_locations$soilTypeOr <- factor(plot_locations$soilTypeOr)
# we'll need 2 colors
levels(plot_locations$soilTypeOr)
blue_orange <- c("cornflowerblue", "darkorange")
ggplot() +
geom_sf(data = HARV_lines, aes(color = TYPE), show.legend = "line") +
geom_sf(data = plot_locations, aes(fill = soilTypeOr),
shape = 21, show.legend = 'point') +
scale_color_manual(name = "Line Type", values = road_colors,
guide = guide_legend(override.aes = list(linetype = "solid", shape = NA))) +
scale_fill_manual(name = "Soil Type", values = blue_orange,
guide = guide_legend(override.aes = list(linetype = "blank", shape = 21, colour = NA))) +
ggtitle("NEON Harvard Forest Field Site") +
coord_sf()
# use 2 different symbols to more strongly distinguish
ggplot() +
geom_sf(data = HARV_lines, aes(color = TYPE), show.legend = "line", size = 1) +
geom_sf(data = plot_locations, aes(fill = soilTypeOr, shape = soilTypeOr),
show.legend = 'point', size = 3) +
scale_shape_manual(name = "Soil Type", values = c(21, 22)) +
scale_color_manual(name = "Line Type", values = road_colors,
guide = guide_legend(override.aes = list(linetype = "solid", shape = NA))) +
scale_fill_manual(name = "Soil Type", values = blue_orange,
guide = guide_legend(override.aes = list(linetype = "blank", shape = c(21, 22),
color = blue_orange))) +
ggtitle("NEON Harvard Forest Field Site") +
coord_sf()
# do math to create canopy height model
HARV_CHM <- HARV_DSM - HARV_DTM
HARV_CHM_df <- as.data.frame(HARV_CHM, xy = TRUE)
# we made a DTM for SJER. Now let's make one for HARV
HARV_DTM <- raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DTM/HARV_dtmCrop.tif")
HARV_DTM_hill <- raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DTM/HARV_DTMhill_WGS84.tif")
HARV_DTM_df <- as.data.frame(HARV_DTM, xy = TRUE)
HARV_DTM_hill_df <- as.data.frame(HARV_DTM_hill, xy = TRUE)
# do math to create canopy height model
HARV_CHM <- HARV_DSM - HARV_DTM
HARV_CHM_df <- as.data.frame(HARV_CHM, xy = TRUE)
# this doesn't match the lesson
names(HARV_CHM_df)[names(HARV_CHM_df) == 'layer'] <- 'Elevation'
# the 2 names in the raster line were wrong
# is it not CHM? idk where fill = canopy_discrete is from either...
# NVM fixed the raster lines, last time CHM data used, episode 4.
ggplot() +
geom_raster(data = HARV_CHM_df, aes(x = x, y = y, fill = Elevation)) +
geom_sf(data = HARV_lines, color = "black") +
geom_sf(data = aoi_boundary_HARV, color = "grey20", size = 1) +
geom_sf(data = HARV_points, pch = 8) +
ggtitle("NEON Harvard Forest Field Site w/ Canopy Height Model") +
coord_sf()
#we will use census data for this portion, read in the following line:
state_boundary_US <- st_read("data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-State-Boundaries-Census-2014.shp") %>%
st_zm()
# Plot the U.S. States Data:
ggplot() +
geom_sf(data = state_boundary_US) +
ggtitle("Map of Contiguous US State Boundaries") +
coord_sf()
# create a boundary layer of the United States to make it look nicer.
# Import US boundary dissolved states
country_boundary_US <- st_read("data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-Boundary-Dissolved-States.shp") %>%
st_zm()
# Overlay both vector files to create a nice state/country map
# Make the country border slightly thicker to differentiate the country vs states
ggplot() +
geom_sf(data = country_boundary_US, color = "gray18", size = 2) +
geom_sf(data = state_boundary_US, color = "gray40") +
ggtitle("Map of Contiguous US State Boundaries") +
coord_sf()
# Overlay both vector files to create a nice state/country map
# Make the country border slightly thicker to differentiate the country vs states
ggplot() +
geom_sf(data = country_boundary_US, color = "gray18", size = 3) +
geom_sf(data = state_boundary_US, color = "gray40") +
ggtitle("Map of Contiguous US State Boundaries") +
coord_sf()
# Overlay both vector files to create a nice state/country map
# Make the country border slightly thicker to differentiate the country vs states
ggplot() +
geom_sf(data = country_boundary_US, color = "gray18", size = 4) +
geom_sf(data = state_boundary_US, color = "gray40") +
ggtitle("Map of Contiguous US State Boundaries") +
coord_sf()
# Overlay both vector files to create a nice state/country map
# Make the country border slightly thicker to differentiate the country vs states
ggplot() +
geom_sf(data = country_boundary_US, color = "red", size = 2) +
geom_sf(data = state_boundary_US, color = "gray40") +
ggtitle("Map of Contiguous US State Boundaries") +
coord_sf()
ggtitle("Map of Contiguous US State Boundaries") +
coord_sf()
# Overlay both vector files to create a nice state/country map
# Make the country border slightly thicker to differentiate the country vs states
ggplot() +
geom_sf(data = state_boundary_US, color = "gray40") +
geom_sf(data = country_boundary_US, color = "gray18", size = 2)
# Overlay both vector files to create a nice state/country map
# Make the country border slightly thicker to differentiate the country vs states
ggplot() +
geom_sf(data = country_boundary_US, color = "gray40", size = 2) +
geom_sf(data = state_boundary_US, color = "gray18") +
ggtitle("Map of Contiguous US State Boundaries") +
coord_sf()
# Overlay both vector files to create a nice state/country map
# Make the country border slightly thicker to differentiate the country vs states
ggplot() +
geom_sf(data = country_boundary_US, color = "red", size = 2) +
geom_sf(data = state_boundary_US, color = "gray18") +
ggtitle("Map of Contiguous US State Boundaries") +
coord_sf()
# Overlay both vector files to create a nice state/country map
# Make the country border slightly thicker to differentiate the country vs states
ggplot() +
geom_sf(data = country_boundary_US, color = "red", size = 2) +
#geom_sf(data = state_boundary_US, color = "gray18") +
ggtitle("Map of Contiguous US State Boundaries") +
coord_sf()
# Add CRS to each object
st_crs(point_HARV)$proj4string
# Add CRS to each object
st_crs(HARV_points)$proj4string
#Check the CRS of the state and country boundary objects:
st_crs(state_boundary_US)$proj4string
st_crs(country_boundary_US)$proj4string
## CRS Units - View Object Extent
# first look at the extent of the study site at our tower location
st_bbox(HARV_points)
# then the state boundary data
st_bbox(state_boundary_US)
ggplot() +
geom_sf(data = country_boundary_US, size = 2, color = "gray18") +
geom_sf(data = state_boundary_US, color = "gray40") +
geom_sf(data = HARV_points, shape = 19, color = "purple") +
ggtitle("Map of Contiguous US State Boundaries") +
coord_sf()
NE.States.Boundary.US <- st_read("data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/Boundary-US-State-NEast.shp") %>%
st_zm()
ggplot() +
geom_sf(data = NE.States.Boundary.US, aes(color ="color"),
show.legend = "line") +
scale_color_manual(name = "", labels = "State Boundary",
values = c("color" = "gray18")) +
geom_sf(data = point_HARV, aes(shape = "shape"), color = "purple") +
scale_shape_manual(name = "", labels = "Fisher Tower",
values = c("shape" = 19)) +
ggtitle("Fisher Tower location") +
theme(legend.background = element_rect(color = NA)) +
coord_sf()
ggplot() +
geom_sf(data = NE.States.Boundary.US, aes(color ="color"),
show.legend = "line") +
scale_color_manual(name = "", labels = "State Boundary",
values = c("color" = "gray18")) +
geom_sf(data = HARV_points, aes(shape = "shape"), color = "purple") +
scale_shape_manual(name = "", labels = "Fisher Tower",
values = c("shape" = 19)) +
ggtitle("Fisher Tower location") +
theme(legend.background = element_rect(color = NA)) +
coord_sf()
ggplot() +
geom_sf(data = NE.States.Boundary.US, aes(color ="color"),
show.legend = "line") +
scale_color_manual(name = "", labels = "State Boundary",
values = c("color" = "gray18")) +
geom_sf(data = HARV_points, aes(shape = "shape"), color = "purple") +
scale_shape_manual(name = "", labels = "Fisher Tower",
values = c("shape" = 19)) +
ggtitle("Fisher Tower Harvard Forest") +
theme(legend.background = element_rect(color = NA)) +
coord_sf()
#Import a new csv containing plot coordinates
plot_locations_HARV <-
read.csv("data/NEON-DS-Site-Layout-Files/HARV/HARV_PlotLocations.csv")
str(plot_locations_HARV)
#check column names
names(plot_locations_HARV)
#Import a new csv containing plot coordinates
HARV_plot_locations <-
read.csv("data/NEON-DS-Site-Layout-Files/HARV/HARV_PlotLocations.csv")
str(HARV_plot_locations)
#check column names to look for spatial data
names(HARV_plot_locations)
#Easting/Northing contain fields containing spatial information
head(HARV_plot_locations)
#Easting/Northing contain fields containing spatial information
head(HARV_plot_locations$Easting)
#Easting/Northing contain fields containing spatial information
head(HARV_plot_locations$easting)
head(HARV_plot_locations$northing)
# Before we convert to a spatial object, we need to know the CRS
head(HARV_plot_locations$geodeticDa)
# Before we convert to a spatial object, we need to know the CRS
# when we ran line 11, we also have "geodeticDa" and "utmZone"
head(HARV_plot_locations$geodeticDa)
head(HARV_plot_locations$utmZone)
st_crs(HARV_points)
# Create CRS object that we can use to define the CRS of our new sf object when we create it
utm18nCRS <- st_crs(HARV_points)
utm18nCRS
class(utm18nCRS)
HARV_plot_locations_sp <- st_as_sf(HARV_plot_locations,
coords = c("easting", "northing"),
crs = utm18nCRS)
# Check the new CRS to see if correct
st_crs(HARV_plot_locations_sp)
#Now plot the object
ggplot() +
geom_sf(data = HARV_plot_locations_sp) +
ggtitle("Map of Plot Locations")
geom_sf(data = HARV_plot_locations_sp +
# Plot extent adding the aoi boundary
ggplot() +
geom_sf(data = aoi_boundary_HARV) +
geom_sf(data = HARV_plot_locations_sp) +
ggtitle("AOI Boundary Plot")
ggplot() +
# Plot extent adding the aoi boundary
ggplot() +
geom_sf(data = aoi_boundary_HARV) +
geom_sf(data = HARV_plot_locations_sp) +
ggtitle("AOI Boundary Plot")
newplot_loc_HARV <-
read.csv("data/NEON-DS-Site-Layout-Files/HARV/HARV_2NewPhenPlots.csv")
str(newplot_loc_HARV)
geogCRS
geogCRS <- st_crs(country_boundary_US)
geogCRS
Phenplot_sp_HARV <- st_as_sf(newplot_loc_HARV,
coords = c("decimalLon", "decimalLat"),
crs = geogCRS)
st_crs(Phenplot_sp_HARV)
ggplot() +
geom_sf(data = newplot_loc_HARV, color = "orange") +
geom_sf(data = Phenplot_sp_HARV, color = "lightblue") +
ggtitle("Map of All Plot Locations")
rlang::last_trace()
st_crs(Phenplot_sp_HARV)
ggplot() +
geom_sf(data = newplot_loc_HARV, color = "orange") +
geom_sf(data = Phenplot_sp_HARV, color = "lightblue") +
ggtitle("Map of All Plot Locations")
ggplot() +
geom_sf(data = HARV_plot_locations_sp, color = "orange") +
geom_sf(data = Phenplot_sp_HARV, color = "lightblue") +
ggtitle("Map of All Plot Locations")
## Exporting an ESRI shapefile
st_write(HARV_plot_locations_sp,
"data/HARV_PlotLocations.shp", driver = "ESRI Shapefile")
