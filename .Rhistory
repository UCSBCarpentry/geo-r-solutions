install.packages("installr")
rversion()
install.packages("rversions")
rversion()
rversions()
library("rversions")
rversions()
sessionInfo()
install.packages("tidyverse")
quarto check
# Install the template packages to your R library
install.packages(c("sandpaper", "varnish", "pegboard", "tinkr"))
install.packages(c("sandpaper", "varnish", "pegboard", "tinkr"))
#Install raster and terra if not installed already
install.pacakges(c("raster", "terra"))
#Install raster and terra if not installed already
install.packages(c("raster", "terra"))
library(raster)
library(rgdal)
library(ggplot2)
library(dplyr)
library(terra)
getwd()
setwd("C:/Users/kliu/Desktop/geo-r-solutions")
describe("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
DSM_HARV_info <- capture.output(
describe("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
)
DSM_HARV <-
rast("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
DSM_HARV
summary(DSM_HARV)
summary(values(DSM_HARV))
# or the tidy way
values(DSM_HARV) %>% summary()
# as usual, ggplot wants dataframes
DSM_HARV_df <- as.data.frame(DSM_HARV, xy = TRUE)
str(DSM_HARV_df)
# change the name of the column to better reflect what it is:
# this isn't in the lesson
names(DSM_HARV_df)[names(DSM_HARV_df) == 'HARV_dsmCrop'] <- 'Elevation'
str(DSM_HARV_df)
ggplot() +
geom_raster(data = DSM_HARV_df , aes(x = x, y = y, fill = Elevation)) +
scale_fill_viridis_c() +
coord_quickmap()
crs(DSM_HARV)
# calculating maxes and mins
minmax(DSM_HARV)
min(values(DSM_HARV))
max(values(DSM_HARV))
# deal with NA's
# I think this ggplot should go after any(is.na) and summary()
ggplot() +
geom_raster(data = DSM_HARV_df , aes(x = x, y = y, fill = Elevation)) +
scale_fill_viridis_c(na.value = 'deeppink') +
coord_quickmap()
#check if there are actually any NA's
#A few ways:
any(is.na(DSM_HARV_df$Elevation))
# no value = -9999
DSM_HARV_info
# this shows our current raster doesn't have any.
summary(DSM_HARV)
### To get a similar image in the lesson example
# Load image into dataframe
HARV_DTM_df <- raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DTM/HARV_DTMhill_WGS84.tif") %>%
as.data.frame(xy = TRUE)
ggplot() +
geom_raster(data = HARV_DTM_df , aes(x = x, y = y, fill = HARV_DTMhill_WGS84)) +
scale_fill_viridis_c(na.value = 'deeppink') +
coord_quickmap()
### here the elevation isn't being replaced correctly and I'm not sure where to fix
DSM_highvals <- as.data.frame(DSM_highvals, xy = TRUE)
DSM_HARV <-
rast("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
DSM_HARV_df <- as.data.frame(DSM_HARV, xy = TRUE)
# our existing dataframe
DSM_HARV_df
## Kristi stop here def something fishy with elevation
# mutate into bins
DSM_HARV_df<- DSM_HARV_df %>%
mutate(fct_elevation = cut(Elevation, breaks = 3))
names(DSM_HARV_df)[names(DSM_HARV_df) == 'HARV_dsmCrop'] <- 'Elevation'
## Kristi stop here def something fishy with elevation
# mutate into bins
DSM_HARV_df<- DSM_HARV_df %>%
mutate(fct_elevation = cut(Elevation, breaks = 3))
ggplot() +
geom_bar(data = HARV_DSM_df, aes(fct_elevation))
## Kristi stop here def something fishy with elevation
# mutate into bins
DSM_HARV_df<- DSM_HARV_df %>%
mutate(fct_elevation = cut(Elevation, breaks = 3))
ggplot() +
geom_bar(data = HARV_DSM_df, aes(fct_elevation))
DSM_HARV_df %>%
group_by(fct_elevation) %>%
count()
unique(HARV_DSM_df$fct_elevation)
unique(DSM_Harv_df$fct_elevation)
unique(DSM_HARV_df$fct_elevation)
DSM_HARV_df %>%
group_by(fct_elevation) %>%
count()
# mutate into specified bins
custom_bins <- c(300, 350, 400, 450)
DSM_HARV_df <- DSM_HARV_df %>%
mutate(fct_elevation_2 = cut(Elevation, breaks = custom_bins))
DSM_HARV_df %>%
group_by(fct_elevation) %>%
count()
# mutate into specified bins
custom_bins <- c(300, 350, 400, 450)
DSM_HARV_df <- DSM_HARV_df %>%
mutate(fct_elevation_2 = cut(Elevation, breaks = custom_bins))
#kristi up to here now
DSM_HARV_df <- DSM_HARV_df %>%
mutate(fct_elevation_2 = cut(Elevation, breaks = custom_bins))
unique(DSM_HARV_df$fct_elevation_2)
# this again highlights the over 400.
ggplot() +
geom_bar(data = DSM_HARV_df, aes(fct_elevation_2))
View(DSM_HARV_df)
# and get the count of pixels in each bin
DSM_HARV_df %>%
group_by(fct_elevation_2) %>%
count()
# map it
ggplot() +
geom_raster(data = DSM_HARV_df , aes(x = x, y = y, fill = fct_elevation_2)) +
coord_quickmap()
# that default color scheme doesn't work so well.
# try this one:
terrain.colors(3)
ggplot() +
geom_raster(data = DSM_HARV_df , aes(x = x, y = y,
fill = fct_elevation_2)) +
scale_fill_manual(values = terrain.colors(3)) +
coord_quickmap()
# I was thinking we could get fancy and have one color
# for each unique value, but that would be ridic.
# this takes long enough
# AND it doesn't work that way
ggplot() +
geom_raster(data = DSM_HARV_df , aes(x = x, y = y,
fill = fct_elevation)) +
scale_fill_manual(values = terrain.colors(50)) +
coord_quickmap()
# I was thinking we could get fancy and have one color
# for each unique value, but that would be ridic.
# this takes long enough
# AND it doesn't work that way
ggplot() +
geom_raster(data = DSM_HARV_df , aes(x = x, y = y,
fill = fct_elevation_2)) +
scale_fill_manual(values = terrain.colors(50)) +
coord_quickmap()
# I was thinking we could get fancy and have one color
# for each unique value, but that would be ridic.
# this takes long enough
# AND it doesn't work that way
ggplot() +
geom_raster(data = DSM_HARV_df , aes(x = x, y = y,
fill = fct_elevation)) +
scale_fill_manual(values = terrain.colors(50)) +
coord_quickmap()
# save your colors in an object for re-use
# and add a title to the legend
my_col <- terrain.colors(3)
ggplot() +
geom_raster(data = DSM_HARV_df , aes(x = x, y = y,
fill = fct_elevation_2)) +
scale_fill_manual(values = my_col, name = "Elevation") +
coord_quickmap()
# this one's not complete in the lesson: x and y labels:
ggplot() +
geom_raster(data = DSM_HARV_df , aes(x = x, y = y,
fill = fct_elevation_2)) +
scale_fill_manual(values = my_col,
name="Elevation") +
xlab("Easting") +
ylab("Northing") +
coord_quickmap()
#Kristi up to here
# challenge plot
DSM_HARV_df <- DSM_HARV_df  %>%
mutate(fct_elevation_6 = cut(Elevation, breaks = 6))
my_col <- terrain.colors(6)
ggplot() +
geom_raster(data = DSM_HARV_df , aes(x = x, y = y,
fill = fct_elevation_6)) +
scale_fill_manual(values = my_col, name = "Elevation") +
ggtitle("Classified Elevation Map - NEON Harvard Forest Field Site") +
xlab("UTM Easting Coordinate (m)") +
ylab("UTM Northing Coordinate (m)") +
coord_quickmap()
# layering rasters
HARV_hill <-
raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_DSMhill.tif")
HARV_hill
HARV_hill_df <- as.data.frame(HARV_hill, xy = TRUE)
str(HARV_hill_df)
# plot that with no legend
ggplot() +
geom_raster(data = HARV_hill_df,
aes(x = x, y = y, alpha = HARV_DSMhill)) +
scale_alpha(range =  c(0.15, 0.65), guide = "none") +
coord_quickmap()
# the top layer needs an alpha if you hope to see it.
# plots build in the order you call the geom's
ggplot() +
geom_raster(data = DSM_HARV_df ,
aes(x = x, y = y,
fill = Altitude)) +
geom_raster(data = HARV_hill_df,
aes(x = x, y = y,
alpha = HARV_DSMhill)) +
scale_fill_viridis_c() +
scale_alpha(range = c(0.15, 0.65), guide = "none") +
ggtitle("Elevation with hillshade") +
coord_quickmap()
# the top layer needs an alpha if you hope to see it.
# plots build in the order you call the geom's
ggplot() +
geom_raster(data = DSM_HARV_df ,
aes(x = x, y = y,
fill = Elevation)) +
geom_raster(data = HARV_hill_df,
aes(x = x, y = y,
alpha = HARV_DSMhill)) +
scale_fill_viridis_c() +
scale_alpha(range = c(0.15, 0.65), guide = "none") +
ggtitle("Elevation with hillshade") +
coord_quickmap()
# import DSM hillshade
SJER_DSM_hill <- raster("data/NEON-DS-Airborne-Remote-Sensing/SJER/DSM/SJER_dsmHill.tif")
# convert to a df for plotting
SJER_DSM_hill_df <- as.data.frame(SJER_DSM_hill, xy = TRUE)
# Build Plot
ggplot() +
geom_raster(data = SJER_DSM_df ,
aes(x = x, y = y,
fill = SJER_dsmCrop,
alpha = 0.8)
) +
geom_raster(data = SJER_DSM_hill_df,
aes(x = x, y = y,
alpha = SJER_dsmHill)
) +
scale_fill_viridis_c() +
guides(fill = guide_colorbar()) +
scale_alpha(range = c(0.4, 0.7), guide = "none") +
# remove grey background and grid lines
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("UTM Easting Coordinate (m)") +
ylab("UTM Northing Coordinate (m)") +
ggtitle("DSM with Hillshade") +
coord_quickmap()
# Build Plot
ggplot() +
geom_raster(data = SJER_DSM_hill_df ,
aes(x = x, y = y,
fill = SJER_dsmCrop,
alpha = 0.8)
) +
geom_raster(data = SJER_DSM_hill_df,
aes(x = x, y = y,
alpha = SJER_dsmHill)
) +
scale_fill_viridis_c() +
guides(fill = guide_colorbar()) +
scale_alpha(range = c(0.4, 0.7), guide = "none") +
# remove grey background and grid lines
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("UTM Easting Coordinate (m)") +
ylab("UTM Northing Coordinate (m)") +
ggtitle("DSM with Hillshade") +
coord_quickmap()
# Build Plot
ggplot() +
geom_raster(data = SJER_DSM_hill_df ,
aes(x = x, y = y,
fill = SJER_DSM,
alpha = 0.8)
) +
geom_raster(data = SJER_DSM_hill_df,
aes(x = x, y = y,
alpha = SJER_dsmHill)
) +
scale_fill_viridis_c() +
guides(fill = guide_colorbar()) +
scale_alpha(range = c(0.4, 0.7), guide = "none") +
# remove grey background and grid lines
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("UTM Easting Coordinate (m)") +
ylab("UTM Northing Coordinate (m)") +
ggtitle("DSM with Hillshade") +
coord_quickmap()
# Build Plot
ggplot() +
geom_raster(data = SJER_DSM_hill_df ,
aes(x = x, y = y,
fill = SJER_DSM_hill_df,
alpha = 0.8)
) +
geom_raster(data = SJER_DSM_hill_df,
aes(x = x, y = y,
alpha = SJER_dsmHill)
) +
scale_fill_viridis_c() +
guides(fill = guide_colorbar()) +
scale_alpha(range = c(0.4, 0.7), guide = "none") +
# remove grey background and grid lines
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("UTM Easting Coordinate (m)") +
ylab("UTM Northing Coordinate (m)") +
ggtitle("DSM with Hillshade") +
coord_quickmap()
# import DSM data
SJER_DSM <- raster("data/NEON-DS-Airborne-Remote-Sensing/SJER/DSM/SJER_dsmCrop.tif")
# convert to a df for plotting
SJER_DSM_df <- as.data.frame(SJER_DSM, xy = TRUE)
# Build Plot
ggplot() +
geom_raster(data = SJER_DSM_df ,
aes(x = x, y = y,
fill = SJER_dsmCrop,
alpha = 0.8)
) +
geom_raster(data = SJER_DSM_hill_df,
aes(x = x, y = y,
alpha = SJER_dsmHill)
) +
scale_fill_viridis_c() +
guides(fill = guide_colorbar()) +
scale_alpha(range = c(0.4, 0.7), guide = "none") +
# remove grey background and grid lines
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("UTM Easting Coordinate (m)") +
ylab("UTM Northing Coordinate (m)") +
ggtitle("DSM with Hillshade") +
coord_quickmap()
# Kristi here now
# CREATE DTM MAP
# import DTM
# think: T = Treetops.
DTM_SJER <- raster("data/NEON-DS-Airborne-Remote-Sensing/SJER/DTM/SJER_dtmCrop.tif")
DTM_SJER_df <- as.data.frame(DTM_SJER, xy = TRUE)
# DTM Hillshade
DTM_hill_SJER <- raster("data/NEON-DS-Airborne-Remote-Sensing/SJER/DTM/SJER_dtmHill.tif")
DTM_hill_SJER_df <- as.data.frame(DTM_hill_SJER, xy = TRUE)
ggplot() +
geom_raster(data = DTM_SJER_df ,
aes(x = x, y = y,
fill = SJER_dtmCrop,
alpha = 2.0)
) +
geom_raster(data = DTM_hill_SJER_df,
aes(x = x, y = y,
alpha = SJER_dtmHill)
) +
scale_fill_viridis_c() +
guides(fill = guide_colorbar()) +
scale_alpha(range = c(0.4, 0.7), guide = "none") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank()) +
ggtitle("DTM with Hillshade") +
coord_quickmap()
# we made a DTM for SJER. Now let's make one for HARV
HARV_DTM <- raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DTM/HARV_dtmCrop.tif")
HARV_DTM_hill <- raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DTM/HARV_DTMhill_WGS84.tif")
HARV_DTM_df <- as.data.frame(HARV_DTM, xy = TRUE)
HARV_DTM_hill_df <- as.data.frame(HARV_DTM_hill, xy = TRUE)
# each one plots independently
ggplot() +
geom_raster(data = HARV_DTM_df,
aes(x = x, y = y,
fill = HARV_dtmCrop)) +
scale_fill_gradientn(name = "Elevation", colors = terrain.colors(10)) +
coord_quickmap()
ggplot() +
geom_raster(data = HARV_DTM_hill_df,
aes(x = x, y = y,
alpha = HARV_DTMhill_WGS84)) +
coord_quickmap()
# we could have figured this out first
# (read the first line)
crs(HARV_DTM)
crs(HARV_DTM_hill)
(HARV_DTM)
(HARV_DTM_hill)
HARV_DTM_hill_reprojected <- projectRaster(HARV_DTM_hill,
crs = crs(HARV_DTM))
(HARV_DTM_hill_reprojected)
(HARV_DTM)
# this still doesn't work because the EXTENTS don't match
HARV_DTM_hill_reprojected_df <- as.data.frame(HARV_DTM_hill_reprojected, xy=TRUE)
ggplot() +
geom_raster(data = HARV_DTM_df ,
aes(x = x, y = y,
fill = HARV_dtmCrop)) +
geom_raster(data = HARV_DTM_hill_df,
aes(x = x, y = y,
alpha = HARV_DTMhill_WGS84)) +
scale_fill_gradientn(name = "Elevation", colors = terrain.colors(10)) +
coord_quickmap()
# you can see that
extent(HARV_DTM_hill_reprojected)
extent(HARV_DTM_hill)
# easier to determine:
extent(HARV_DTM_hill_reprojected) == extent(HARV_DTM_hill)
# another thing that doesn't match after reprojection is pixel size
res(HARV_DTM_hill_reprojected)
res(HARV_DTM)
# force them to match
HARV_DTM_hill_reprojected <- projectRaster(HARV_DTM_hill,
crs = crs(HARV_DTM),
res = res(HARV_DTM))
# make a dataframe
HARV_DTM_hill_2_df <- as.data.frame(HARV_DTM_hill_reprojected, xy = TRUE)
ggplot() +
geom_raster(data = HARV_DTM_df ,
aes(x = x, y = y,
fill = HARV_dtmCrop)) +
geom_raster(data = HARV_DTM_hill_2_df,
aes(x = x, y = y,
alpha = HARV_DTMhill_WGS84)) +
scale_fill_gradientn(name = "Elevation", colors = terrain.colors(10)) +
coord_quickmap()
