aes(x = x, y = y, alpha = HARV_RGB_Ortho_2)) +
coord_equal()
# multi-bands get called as 'stacks'
RGB_stack_HARV <- rast("data/NEON-DS-Airborne-Remote-Sensing/HARV/RGB_Imagery/HARV_RGB_Ortho.tif")
# we can see all 3 bands:
RGB_stack_HARV
# view attributes of each band by using index values
RGB_stack_HARV[[2]]
# make a dataframe
RGB_stack_HARV_df  <- as.data.frame(RGB_stack_HARV, xy = TRUE)
str(RGB_stack_HARV_df)
# create histogram of band 1
ggplot()+
geom_histogram(data=RGB_stack_HARV_df, aes(HARV_RGB_Ortho_1))
ggplot()+
geom_raster(data = RGB_stack_HARV_df,
aes(x=x, y=y, alpha = HARV_RGB_Ortho_2))+
coord_quickmap()
# Creating a 3-band image:
plotRGB(RGB_stack_HARV,
r = 1, g = 2, b = 3)
#############################
# challenge raster
describe("data/NEON-DS-Airborne-Remote-Sensing/HARV/RGB_Imagery/HARV_Ortho_wNA.tif")
HARV_NA <- rast("data/NEON-DS-Airborne-Remote-Sensing/HARV/RGB_Imagery/HARV_Ortho_wNA.tif")
plotRGB(HARV_NA,
r = 1, g = 2, b = 3)
describe("data/NEON-DS-Airborne-Remote-Sensing/HARV/RGB_Imagery/HARV_RGB_Ortho.tif")
RGB_sds_HARV <- sds(RGB_stack_HARV)
RGB_sds_HARV <-sds(list(RGB_stack_HARV, RGB_stack_HARV))
#####
# Great R tip reminder
# methods()
methods(class=class(HARV_stack))
#####
# Great R tip reminder
# methods()
methods(class=class(RGB_stack_HARV))
# our first new library in a while
#install.packages("sf")
library(sf)
# vector files are shapefiles
aoi_boundary_HARV <- st_read(
"data/NEON-DS-Site-Layout-Files/HARV/HarClip_UTMZ18.shp")
# there are 18 types of shapefiles.
# this one is polygons
st_geometry_type(aoi_boundary_HARV)
# and it has CRS metadata baked into it
st_crs(aoi_boundary_HARV)
# one of those pieces of data is a bounding box
# you will need these in your future life
st_bbox(aoi_boundary_HARV)
# mostly we want to make maps
# this is not a useful map
ggplot() +
geom_sf(data = aoi_boundary_HARV, size = 3, color = "black", fill = "cyan1") +
ggtitle("AOI Boundary Plot") +
coord_sf()
# Let's move on to point and line shapefiles
lines_HARV <- st_read("data/NEON-DS-Site-Layout-Files/HARV/HARV_roads.shp")
point_HARV <- st_read("data/NEON-DS-Site-Layout-Files/HARV/HARVtower_UTM18N.shp")
# that's a "spatial" "dataframe"
class(lines_HARV)
class(point_HARV)
# it's got a CRS
# just like raster data does
# what's the raster version of the command?
st_crs(lines_HARV)
# bounding boxes make more sense when your
# shapefile is more than just a single rectangle
st_bbox(lines_HARV)
st_crs(point_HARV)
st_bbox(point_HARV)
# this shows us the attribute table
# there's only one point
view(point_HARV)
# this shows us the attribute table
# there's only one point
view(point_HARV)
# outputting only the variable names
# shows you a count of the objects
# and some other metadata
# and a sort of 'HEAD'
point_HARV
new("standardGeneric", .Data = function (x)
standardGeneric("ncol"), generic = "ncol", package = "base",
group = list(), valueClass = character(0), signature = "x",
default = new("derivedDefaultMethod", .Data = function (x)
dim(x)[2L], target = new("signature", .Data = "ANY", names = "x",
package = "methods"), defined = new("signature", .Data = "ANY",
names = "x", package = "methods"), generic = "ncol"),
skeleton = (new("derivedDefaultMethod", .Data = function (x)
dim(x)[2L], target = new("signature", .Data = "ANY", names = "x",
package = "methods"), defined = new("signature", .Data = "ANY",
names = "x", package = "methods"), generic = "ncol"))(x))
# we can count the attributes
ncol(lines_HARV)
# we can view the attribute names
names(lines_HARV)
names(point_HARV)
# our old friend helps too:
head(lines_HARV)
#find number of attributes
ncol(point_HARV)
ncol(aoi_boundary_HARV)
# call out a whole column / attribute:
point_HARV$Ownership
lines_HARV$TYPE
#To see only unique values
unique(lines_HARV$TYPE)
# all this stuff works with the tidyverse
# so you can use pipes
footpath_HARV <- lines_HARV %>%
filter(TYPE == "footpath")
nrow(footpath_HARV)
nrow(HARV_footpath)
head(HARV_footpath)
nrow(footpath_HARV)
head(footpath_HARV)
# now the exciting part, let's map it
ggplot() +
geom_sf(data = footpath_HARV) +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Footpaths") +
coord_sf()
ggplot() +
geom_sf(data = footpath_HARV, aes(color = factor(OBJECTID)), size = 1.5) +
labs(color = 'Footpath ID') +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Footpaths") +
coord_sf()
# challenge 1
boardwalk_HARV <- lines_HARV %>%
filter(TYPE == "boardwalk")
# there's 1 row
nrow(boardwalk_HARV)
ggplot() +
geom_sf(data = boardwalk_HARV, size = 1.5) +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Boardwalks") +
coord_sf()
# challenge 2
stoneWall_HARV <- lines_HARV %>%
filter(TYPE == "stone wall")
nrow(stoneWall_HARV)
ggplot() +
geom_sf(data = stoneWall_HARV, aes(color = factor(OBJECTID)), size = 1.5) +
labs(color = 'Wall ID') +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Stonewalls") +
coord_sf()
# this just moves on in the lesson
# but if we want to see unique values,
# we have to get that column to be a factor
lines_HARV$TYPE <- factor(HARV_lines$TYPE)
# this just moves on in the lesson
# but if we want to see unique values,
# we have to get that column to be a factor
lines_HARV$TYPE <- factor(lines_HARV$TYPE)
unique(lines_HARV$TYPE)
road_colors <- c("blue", "green", "navy", "purple")
ggplot() +
geom_sf(data = lines_HARV, aes(color = TYPE)) +
scale_color_manual(values = road_colors) +
labs(color = 'Road Type') +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Roads & Trails") +
coord_sf()
# use different line widths
line_widths <- c(1, 2, 3, 4)
ggplot() +
geom_sf(data = lines_HARV, aes(color = TYPE, size = TYPE)) +
scale_color_manual(values = road_colors) +
labs(color = 'Road Type') +
scale_size_manual(values = line_widths) +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Roads & Trails - Line width varies") +
coord_sf()
##Challenge: Plot line width by attribute
# they come out in the order they are stored,
# so you can assign in that order
unique(lines_HARV$TYPE)
line_width <- c(1, 3, 2, 6)
ggplot() +
geom_sf(data = lines_HARV, aes(size = TYPE)) +
scale_size_manual(values = line_width) +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Roads & Trails - Line width varies") +
coord_sf()
# work on that legend
ggplot() +
geom_sf(data = lines_HARV, aes(color = TYPE), size = 1.5) +
scale_color_manual(values = road_colors) +
labs(color = 'Road Type') +
ggtitle("NEON Harvard Forest Field Site",
subtitle = "Roads & Trails - Default Legend") +
coord_sf()
# change legend text and draw a box around it
ggplot() +
geom_sf(data = lines_HARV, aes(color = TYPE), size = 1.5) +
scale_color_manual(values = road_colors) +
labs(color = 'Road Type') +
theme(legend.text = element_text(size = 14),
legend.box.background = element_rect(size = 1)) +
ggtitle("NEON Harvard Forest Field Site",
subtitle = "Roads & Trails - Modified Legend") +
coord_sf()
# make the colors less obnoxious
new_colors <- c("springgreen", "blue", "magenta", "orange")
ggplot() +
geom_sf(data = lines_HARV, aes(color = TYPE), size = 1.5) +
scale_color_manual(values = new_colors) +
labs(color = 'Road Type') +
theme(legend.text = element_text(size = 14),
legend.box.background = element_rect(size = 1)) +
ggtitle("NEON Harvard Forest Field Site",
subtitle = "Roads & Trails - Pretty Colors") +
coord_sf()
# bicycle challenge
lines_HARV$BicyclesHo <- as.factor(lines_HARV$BicyclesHo)
class(lines_HARV$BicyclesHo)
# same iss ue as roadtype
levels(lines_HARV$BicyclesHo)
# remove missing values
lines_removeNA <- lines_HARV[!is.na(lines_HARV$BicyclesHo),]
# First, create a data frame with only those roads where bicycles and horses are allowed
lines_showHarv <-
lines_removeNA %>%
filter(BicyclesHo == "Bicycles and Horses Allowed")
# Next, visualise using ggplot
ggplot() +
geom_sf(data = lines_HARV) +
geom_sf(data = lines_showHarv, aes(color = BicyclesHo), size = 2) +
scale_color_manual(values = "magenta") +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Roads Where Bikes and Horses Are Allowed") +
coord_sf()
# to stack them up, use
# multiple geom_sf
# they draw in order (ie: first line on the bottom)
ggplot() +
geom_sf(data = aoi_boundary_HARV, fill = "grey", color = "grey") +
geom_sf(data = lines_HARV, aes(color = TYPE), size = 1) +
geom_sf(data = point_HARV) +
ggtitle("NEON Harvard Forest Field Site") +
coord_sf()
# let's make a better legend
ggplot() +
geom_sf(data = aoi_boundary_HARV, fill = "grey", color = "grey") +
geom_sf(data = lines_HARV, aes(color = TYPE),
show.legend = "line", size = 1) +
geom_sf(data = point_HARV, aes(fill = Sub_Type), color = "black") +
scale_color_manual(values = road_colors) +
scale_fill_manual(values = "black") +
ggtitle("NEON Harvard Forest Field Site") +
coord_sf()
# name that legend better
ggplot() +
geom_sf(data = aoi_boundary_HARV, fill = "grey", color = "grey") +
geom_sf(data = point_HARV, aes(fill = Sub_Type)) +
geom_sf(data = HARV_lines, aes(color = TYPE), show.legend = "line",
size = 1) +
scale_color_manual(values = road_colors, name = "Line Type") +
scale_fill_manual(values = "black", name = "Tower Location") +
ggtitle("NEON Harvard Forest Field Site") +
coord_sf()
# name that legend better
ggplot() +
geom_sf(data = aoi_boundary_HARV, fill = "grey", color = "grey") +
geom_sf(data = point_HARV, aes(fill = Sub_Type)) +
geom_sf(data = lines_HARV, aes(color = TYPE), show.legend = "line",
size = 1) +
scale_color_manual(values = road_colors, name = "Line Type") +
scale_fill_manual(values = "black", name = "Tower Location") +
ggtitle("NEON Harvard Forest Field Site") +
coord_sf()
# get help with point symbols
?pch
# I got this off the internet
par(font=2, mar=c(0.5,0,0,0))
y=rev(c(rep(1,6),rep(2,5), rep(3,5), rep(4,5), rep(5,5)))
x=c(rep(1:5,5),6)
plot(x, y, pch = 0:25, cex=1.5, ylim=c(1,5.5), xlim=c(1,6.5),
axes=FALSE, xlab="", ylab="", bg="blue")
text(x, y, labels=0:25, pos=3)
par(mar=oldPar$mar,font=oldPar$font )
# shape = 15 is a nice box
ggplot() +
geom_sf(data = aoi_boundary_HARV, fill = "grey", color = "grey") +
geom_sf(data = point_HARV, aes(fill = Sub_Type), shape = 15) +
geom_sf(data = lines_HARV, aes(color = TYPE),
show.legend = "line", size = 1) +
scale_color_manual(values = road_colors, name = "Line Type") +
scale_fill_manual(values = "black", name = "Tower Location") +
ggtitle("NEON Harvard Forest Field Site") +
coord_sf()
# challenge
plot_locations <- st_read("data/NEON-DS-Site-Layout-Files/HARV/PlotLocations_HARV.shp")
# we'll need to make a factor
levels(plot_locations$soilTypeOr)
plot_locations$soilTypeOr <- factor(plot_locations$soilTypeOr)
# we'll need 2 colors
levels(plot_locations$soilTypeOr)
blue_orange <- c("cornflowerblue", "darkorange")
ggplot() +
geom_sf(data = lines_HARV, aes(color = TYPE), show.legend = "line") +
geom_sf(data = plot_locations, aes(fill = soilTypeOr),
shape = 21, show.legend = 'point') +
scale_color_manual(name = "Line Type", values = road_colors,
guide = guide_legend(override.aes = list(linetype = "solid", shape = NA))) +
scale_fill_manual(name = "Soil Type", values = blue_orange,
guide = guide_legend(override.aes = list(linetype = "blank", shape = 21, colour = NA))) +
ggtitle("NEON Harvard Forest Field Site") +
coord_sf()
# use 2 different symbols to more strongly distinguish
ggplot() +
geom_sf(data = lines_HARV, aes(color = TYPE), show.legend = "line", size = 1) +
geom_sf(data = plot_locations, aes(fill = soilTypeOr, shape = soilTypeOr),
show.legend = 'point', size = 3) +
scale_shape_manual(name = "Soil Type", values = c(21, 22)) +
scale_color_manual(name = "Line Type", values = road_colors,
guide = guide_legend(override.aes = list(linetype = "solid", shape = NA))) +
scale_fill_manual(name = "Soil Type", values = blue_orange,
guide = guide_legend(override.aes = list(linetype = "blank", shape = c(21, 22),
color = blue_orange))) +
ggtitle("NEON Harvard Forest Field Site") +
coord_sf()
# the 2 names in the raster line were wrong
# is it not CHM? idk where fill = canopy_discrete is from either...
# NVM fixed the raster lines, last time CHM data used, episode 4.
ggplot() +
geom_raster(data = HARV_CHM_df, aes(x = x, y = y, fill = Elevation)) +
geom_sf(data = lines_HARV, color = "black") +
geom_sf(data = aoi_boundary_HARV, color = "grey20", size = 1) +
geom_sf(data = points_HARV, pch = 8) +
ggtitle("NEON Harvard Forest Field Site w/ Canopy Height Model") +
coord_sf()
# is it not CHM? idk where fill = canopy_discrete is from either...
# NVM fixed the raster lines, last time CHM data used, episode 4.
ggplot() +
geom_raster(data = CHM_HARV_df, aes(x = x, y = y, fill = Elevation)) +
geom_sf(data = lines_HARV, color = "black") +
geom_sf(data = aoi_boundary_HARV, color = "grey20", size = 1) +
geom_sf(data = points_HARV, pch = 8) +
ggtitle("NEON Harvard Forest Field Site w/ Canopy Height Model") +
coord_sf()
# is it not CHM? idk where fill = canopy_discrete is from either...
# NVM fixed the raster lines, last time CHM data used, episode 4.
ggplot() +
geom_raster(data = CHM_HARV_df, aes(x = x, y = y, fill = Elevation)) +
geom_sf(data = lines_HARV, color = "black") +
geom_sf(data = aoi_boundary_HARV, color = "grey20", size = 1) +
geom_sf(data = point_HARV, pch = 8) +
ggtitle("NEON Harvard Forest Field Site w/ Canopy Height Model") +
coord_sf()
ggplot() +
geom_raster(data = CHM_HARV_df, aes(x = x, y = y, fill = HARV_chmCrop)) +
geom_sf(data = lines_HARV, color = "black") +
geom_sf(data = aoi_boundary_HARV, color = "grey20", size = 1) +
geom_sf(data = point_HARV, pch = 8) +
ggtitle("NEON Harvard Forest Field Site w/ Canopy Height Model") +
coord_sf()
# typo here. in episode 4, the fill is HARV_dsmCrop not chmCrop
# this is wrong in the main lesson
ggplot() +
geom_raster(data = CHM_HARV_df, aes(x = x, y = y, fill = HARV_dsmCrop)) +
geom_sf(data = lines_HARV, color = "black") +
geom_sf(data = aoi_boundary_HARV, color = "grey20", size = 1) +
geom_sf(data = point_HARV, pch = 8) +
ggtitle("NEON Harvard Forest Field Site w/ Canopy Height Model") +
coord_sf()
# we will use census data for this portion, read in the following line:
state_boundary_US <- st_read("data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-State-Boundaries-Census-2014.shp") %>%
st_zm()
# Plot the U.S. States Data:
ggplot() +
geom_sf(data = state_boundary_US) +
ggtitle("Map of Contiguous US State Boundaries") +
coord_sf()
# Plot the U.S. States Data:
ggplot() +
geom_sf(data = state_boundary_US) +
ggtitle("Map of Contiguous US State Boundaries") +
coord_sf()
# create a boundary layer of the United States to make it look nicer.
# Import US boundary dissolved states
country_boundary_US <- st_read("data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-Boundary-Dissolved-States.shp") %>%
st_zm()
# Overlay both vector files to create a nice state/country map
# Make the country border slightly thicker to differentiate the country vs states
ggplot() +
geom_sf(data = country_boundary_US, color = "gray18", size = 2) +
geom_sf(data = state_boundary_US, color = "gray40") +
ggtitle("Map of Contiguous US State Boundaries") +
coord_sf()
# Add CRS to each object
st_crs(point_HARV)$proj4string
#Check the CRS of the state and country boundary objects:
st_crs(state_boundary_US)$proj4string
st_crs(country_boundary_US)$proj4string
## CRS Units - View Object Extent
# first look at the extent of the study site at our tower location
st_bbox(point_HARV)
# then the state boundary data
st_bbox(state_boundary_US)
ggplot() +
geom_sf(data = country_boundary_US, size = 2, color = "gray18") +
geom_sf(data = state_boundary_US, color = "gray40") +
geom_sf(data = point_HARV, shape = 19, color = "purple") +
ggtitle("Map of Contiguous US State Boundaries") +
coord_sf()
NE.States.Boundary.US <- st_read("data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/Boundary-US-State-NEast.shp") %>%
st_zm()
ggplot() +
geom_sf(data = NE.States.Boundary.US, aes(color ="color"),
show.legend = "line") +
scale_color_manual(name = "", labels = "State Boundary",
values = c("color" = "gray18")) +
geom_sf(data = point_HARV, aes(shape = "shape"), color = "purple") +
scale_shape_manual(name = "", labels = "Fisher Tower",
values = c("shape" = 19)) +
ggtitle("Fisher Tower Harvard Forest") +
theme(legend.background = element_rect(color = NA)) +
coord_sf()
#Import a new csv containing plot coordinates
plot_locations_HARV <-
read.csv("data/NEON-DS-Site-Layout-Files/HARV/HARV_PlotLocations.csv")
str(plot_locations_HARV)
# check column names to look for spatial data
names(plot_locations_HARV)
# Easting/Northing contain fields containing spatial information
head(plot_locations_HARV$easting)
head(plot_locations_HARV$northing)
# Before we convert to a spatial object, we need to know the CRS
# when we ran line 11, we also have "geodeticDa" and "utmZone"
head(plot_locations_HARV$geodeticDa)
head(plot_locations_HARV$utmZone)
# check crs of HARV points tower
st_crs(point_HARV)
# Create CRS object that we can use to define the CRS of our new sf object when we create it
utm18nCRS <- st_crs(point_HARV)
utm18nCRS
class(utm18nCRS)
## .csv to sf object
# specify the X Y coordinate values
# specify the crs
plot_locations_sp_HARV <- st_as_sf(HARV_plot_locations,
coords = c("easting", "northing"),
crs = utm18nCRS)
## .csv to sf object
# specify the X Y coordinate values
# specify the crs
plot_locations_sp_HARV <- st_as_sf(plot_locations_HARV,
coords = c("easting", "northing"),
crs = utm18nCRS)
# Check the new CRS to see if correct
st_crs(plot_locations_sp-HARV)
# Now plot the object
ggplot() +
geom_sf(data = plot_locations_sp_HARV) +
ggtitle("Map of Plot Locations")
# Plot extent adding the aoi boundary
ggplot() +
geom_sf(data = aoi_boundary_HARV) +
geom_sf(data = plot_locations_sp_HARV) +
ggtitle("AOI Boundary Plot")
newplot_loc_HARV <-
read.csv("data/NEON-DS-Site-Layout-Files/HARV/HARV_2NewPhenPlots.csv")
str(newplot_loc_HARV)
geogCRS <- st_crs(country_boundary_US)
geogCRS
newplot_locations_HARV <-
read.csv("data/NEON-DS-Site-Layout-Files/HARV/HARV_2NewPhenPlots.csv")
str(newplot_locations_HARV)
#ok why is naming so different for this one?
newPlot.Sp.HARV <- st_as_sf(newplot_loc_HARV,
coords = c("decimalLon", "decimalLat"),
crs = geogCRS)
st_crs(newPlot.Sp.HARV)
ggplot() +
geom_sf(data = plot_locations_sp_HARV, color = "orange") +
geom_sf(data = newPlot.Sp.HARV, color = "lightblue") +
ggtitle("Map of All Plot Locations")
#Need to make sure layers is replaced with elevation in CHM_df layer
ggplot() +
geom_raster(data = CHM_HARV_df, aes(x = x, y = y, fill = Elevation)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
coord_sf()
#Need to make sure layers is replaced with elevation in CHM_df layer
ggplot() +
geom_raster(data = CHM_HARV_df, aes(x = x, y = y, fill = HARV_chmCrop)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
coord_sf()
#
# DTM_HARV <- raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DTM/HARV_dtmCrop.tif")
# DTM_HARV_df <- as.data.frame(HARV_DTM, xy = TRUE)
#
# CHM_HARV <- HARV_DSM - HARV_DTM
HARV_CHM<- raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/CHM/HARV_chmCrop.tif")
#
# DTM_HARV <- raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DTM/HARV_dtmCrop.tif")
# DTM_HARV_df <- as.data.frame(HARV_DTM, xy = TRUE)
#
# CHM_HARV <- HARV_DSM - HARV_DTM
HARV_CHM<- rast("data/NEON-DS-Airborne-Remote-Sensing/HARV/CHM/HARV_chmCrop.tif")
HARV_CHM_df <- as.data.frame(HARV_CHM, xy = TRUE)
#Need to make sure layers is replaced with elevation in CHM_df layer
ggplot() +
geom_raster(data = CHM_HARV_df, aes(x = x, y = y, fill = HARV_chmCrop)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
coord_sf()
#Need to make sure layers is replaced with elevation in CHM_df layer
ggplot() +
geom_raster(data = HARV_CHM_df, aes(x = x, y = y, fill = HARV_chmCrop)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
coord_sf()
