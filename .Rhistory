# there's 1 row
nrow(boardwalk_HARV)
# challenge 2
stoneWall_HARV <- lines_HARV %>%
filter(TYPE == "stone wall")
nrow(stoneWall_HARV)
ggplot() +
geom_sf(data = stoneWall_HARV, aes(color = factor(OBJECTID)), size = 1.5) +
labs(color = 'Wall ID') +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Stonewalls") +
coord_sf()
# this just moves on in the lesson
# but if we want to see unique values,
# we have to get that column to be a factor
lines_HARV$TYPE <- factor(lines_HARV$TYPE)
unique(lines_HARV$TYPE)
road_colors <- c("blue", "green", "navy", "purple")
ggplot() +
geom_sf(data = lines_HARV, aes(color = TYPE)) +
scale_color_manual(values = road_colors) +
labs(color = 'Road Type') +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Roads & Trails") +
coord_sf()
# use different line widths
line_widths <- c(1, 2, 3, 4)
ggplot() +
geom_sf(data = lines_HARV, aes(color = TYPE, size = TYPE)) +
scale_color_manual(values = road_colors) +
labs(color = 'Road Type') +
scale_size_manual(values = line_widths) +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Roads & Trails - Line width varies") +
coord_sf()
##Challenge: Plot line width by attribute
# they come out in the order they are stored,
# so you can assign in that order
unique(lines_HARV$TYPE)
line_width <- c(1, 3, 2, 6)
ggplot() +
geom_sf(data = lines_HARV, aes(size = TYPE)) +
scale_size_manual(values = line_width) +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Roads & Trails - Line width varies") +
coord_sf()
# work on that legend
ggplot() +
geom_sf(data = lines_HARV, aes(color = TYPE), size = 1.5) +
scale_color_manual(values = road_colors) +
labs(color = 'Road Type') +
ggtitle("NEON Harvard Forest Field Site",
subtitle = "Roads & Trails - Default Legend") +
coord_sf()
# change legend text and draw a box around it
ggplot() +
geom_sf(data = lines_HARV, aes(color = TYPE), size = 1.5) +
scale_color_manual(values = road_colors) +
labs(color = 'Road Type') +
theme(legend.text = element_text(size = 14),
legend.box.background = element_rect(size = 1)) +
ggtitle("NEON Harvard Forest Field Site",
subtitle = "Roads & Trails - Modified Legend") +
coord_sf()
# make the colors less obnoxious
new_colors <- c("springgreen", "blue", "magenta", "orange")
ggplot() +
geom_sf(data = lines_HARV, aes(color = TYPE), size = 1.5) +
scale_color_manual(values = new_colors) +
labs(color = 'Road Type') +
theme(legend.text = element_text(size = 14),
legend.box.background = element_rect(size = 1)) +
ggtitle("NEON Harvard Forest Field Site",
subtitle = "Roads & Trails - Pretty Colors") +
coord_sf()
# bicycle challenge
lines_HARV$BicyclesHo <- as.factor(lines_HARV$BicyclesHo)
class(lines_HARV$BicyclesHo)
# same iss ue as roadtype
levels(lines_HARV$BicyclesHo)
# remove missing values
lines_removeNA <- lines_HARV[!is.na(lines_HARV$BicyclesHo),]
# First, create a data frame with only those roads where bicycles and horses are allowed
lines_showHarv <-
lines_removeNA %>%
filter(BicyclesHo == "Bicycles and Horses Allowed")
# Next, visualise using ggplot
ggplot() +
geom_sf(data = lines_HARV) +
geom_sf(data = lines_showHarv, aes(color = BicyclesHo), size = 2) +
scale_color_manual(values = "magenta") +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Roads Where Bikes and Horses Are Allowed") +
coord_sf()
ls()
# to stack them up, use
# multiple geom_sf
# they draw in order (ie: first line on the bottom)
ggplot() +
geom_sf(data = aoi_boundary_HARV, fill = "grey", color = "grey") +
geom_sf(data = lines_HARV, aes(color = TYPE), size = 1) +
geom_sf(data = point_HARV) +
ggtitle("NEON Harvard Forest Field Site") +
coord_sf()
# let's make a better legend
ggplot() +
geom_sf(data = aoi_boundary_HARV, fill = "grey", color = "grey") +
geom_sf(data = lines_HARV, aes(color = TYPE),
show.legend = "line", size = 1) +
geom_sf(data = point_HARV, aes(fill = Sub_Type), color = "black") +
scale_color_manual(values = road_colors) +
scale_fill_manual(values = "black") +
ggtitle("NEON Harvard Forest Field Site") +
coord_sf()
# name that legend better
ggplot() +
geom_sf(data = aoi_boundary_HARV, fill = "grey", color = "grey") +
geom_sf(data = point_HARV, aes(fill = Sub_Type)) +
geom_sf(data = lines_HARV, aes(color = TYPE), show.legend = "line",
size = 1) +
scale_color_manual(values = road_colors, name = "Line Type") +
scale_fill_manual(values = "black", name = "Tower Location") +
ggtitle("NEON Harvard Forest Field Site") +
coord_sf()
# shape = 15 is a nice box
ggplot() +
geom_sf(data = aoi_boundary_HARV, fill = "grey", color = "grey") +
geom_sf(data = point_HARV, aes(fill = Sub_Type), shape = 15) +
geom_sf(data = lines_HARV, aes(color = TYPE),
show.legend = "line", size = 1) +
scale_color_manual(values = road_colors, name = "Line Type") +
scale_fill_manual(values = "black", name = "Tower Location") +
ggtitle("NEON Harvard Forest Field Site") +
coord_sf()
# challenge
plot_locations <- st_read("data/NEON-DS-Site-Layout-Files/HARV/PlotLocations_HARV.shp")
# we'll need to make a factor
levels(plot_locations$soilTypeOr)
plot_locations$soilTypeOr <- factor(plot_locations$soilTypeOr)
# we'll need 2 colors
levels(plot_locations$soilTypeOr)
#create a new color palette for the soil type
blue_orange <- c("cornflowerblue", "darkorange")
#plot it
ggplot() +
geom_sf(data = lines_HARV, aes(color = TYPE), show.legend = "line") +
geom_sf(data = plot_locations, aes(fill = soilTypeOr),
shape = 21, show.legend = 'point') +
scale_color_manual(name = "Line Type", values = road_colors,
guide = guide_legend(override.aes = list(linetype = "solid", shape = NA))) +
scale_fill_manual(name = "Soil Type", values = blue_orange,
guide = guide_legend(override.aes = list(linetype = "blank", shape = 21, colour = NA))) +
ggtitle("NEON Harvard Forest Field Site") +
coord_sf()
# use 2 different symbols to more strongly distinguish
ggplot() +
geom_sf(data = lines_HARV, aes(color = TYPE), show.legend = "line", size = 1) +
geom_sf(data = plot_locations, aes(fill = soilTypeOr, shape = soilTypeOr),
show.legend = 'point', size = 3) +
scale_shape_manual(name = "Soil Type", values = c(21, 22)) +
scale_color_manual(name = "Line Type", values = road_colors,
guide = guide_legend(override.aes = list(linetype = "solid", shape = NA))) +
scale_fill_manual(name = "Soil Type", values = blue_orange,
guide = guide_legend(override.aes = list(linetype = "blank", shape = c(21, 22),
color = blue_orange))) +
ggtitle("NEON Harvard Forest Field Site") +
coord_sf()
# this doesn't match the lesson
# typo here. in episode 4, the fill is HARV_dsmCrop not chmCrop
# this is wrong in the main lesson
ggplot() +
geom_raster(data = CHM_HARV_df, aes(x = x, y = y, fill = HARV_dsmCrop)) +
geom_sf(data = lines_HARV, color = "black") +
geom_sf(data = aoi_boundary_HARV, color = "grey20", size = 1) +
geom_sf(data = point_HARV, pch = 8) +
ggtitle("NEON Harvard Forest Field Site w/ Canopy Height Model") +
coord_sf()
# this doesn't match the lesson
# typo here. in episode 4, the fill is HARV_dsmCrop not chmCrop
# this is wrong in the main lesson, a new CHM layer was read in.
HARV_CHM<- rast("data/NEON-DS-Airborne-Remote-Sensing/HARV/CHM/HARV_chmCrop.tif")
HARV_CHM_df <- as.data.frame(HARV_CHM, xy = TRUE)
ggplot() +
geom_raster(data = HARV_CHM_df, aes(x = x, y = y, fill = HARV_chmCrop)) +
geom_sf(data = lines_HARV, color = "black") +
geom_sf(data = aoi_boundary_HARV, color = "grey20", size = 1) +
geom_sf(data = point_HARV, pch = 8) +
ggtitle("NEON Harvard Forest Field Site w/ Canopy Height Model") +
coord_sf()
# we will use census data for this portion, read in the following line:
state_boundary_US <- st_read("data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-State-Boundaries-Census-2014.shp") %>%
st_zm()
# Plot the U.S. States Data:
ggplot() +
geom_sf(data = state_boundary_US) +
ggtitle("Map of Contiguous US State Boundaries") +
coord_sf()
# create a boundary layer of the United States to make it look nicer.
# Import US boundary dissolved states
country_boundary_US <- st_read("data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-Boundary-Dissolved-States.shp") %>%
st_zm()
# Overlay both vector files to create a nice state/country map
# Make the country border slightly thicker to differentiate the country vs states
ggplot() +
geom_sf(data = country_boundary_US, color = "gray18", size = 2) +
geom_sf(data = state_boundary_US, color = "gray40") +
ggtitle("Map of Contiguous US State Boundaries") +
coord_sf()
# Add CRS to each object
st_crs(point_HARV)$proj4string
#Check the CRS of the state and country boundary objects:
st_crs(state_boundary_US)$proj4string
st_crs(country_boundary_US)$proj4string
## CRS Units - View Object Extent
# first look at the extent of the study site at our tower location
st_bbox(point_HARV)
# then the state boundary data
st_bbox(state_boundary_US)
ggplot() +
geom_sf(data = country_boundary_US, size = 2, color = "gray18") +
geom_sf(data = state_boundary_US, color = "gray40") +
geom_sf(data = point_HARV, shape = 19, color = "purple") +
ggtitle("Map of Contiguous US State Boundaries") +
coord_sf()
ggplot() +
geom_sf(data = country_boundary_US, size = 2, color = "gray18") +
geom_sf(data = state_boundary_US, color = "gray40") +
geom_sf(data = point_HARV, shape = 19, color = "purple") +
ggtitle("Map of Contiguous US State Boundaries") +
coord_sf()
NE.States.Boundary.US <- st_read("data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/Boundary-US-State-NEast.shp") %>%
st_zm()
ggplot() +
geom_sf(data = NE.States.Boundary.US, aes(color ="color"),
show.legend = "line") +
scale_color_manual(name = "", labels = "State Boundary",
values = c("color" = "gray18")) +
geom_sf(data = point_HARV, aes(shape = "shape"), color = "purple") +
scale_shape_manual(name = "", labels = "Fisher Tower",
values = c("shape" = 19)) +
ggtitle("Fisher Tower Harvard Forest") +
theme(legend.background = element_rect(color = NA)) +
coord_sf()
#Import a new csv containing plot coordinates
plot_locations_HARV <-
read.csv("data/NEON-DS-Site-Layout-Files/HARV/HARV_PlotLocations.csv")
str(plot_locations_HARV)
# check column names to look for spatial data
names(plot_locations_HARV)
# Easting/Northing contain fields containing spatial information
head(plot_locations_HARV$easting)
head(plot_locations_HARV$northing)
# check crs of HARV points tower
st_crs(point_HARV)
# Create CRS object that we can use to define the CRS of our new sf object when we create it
utm18nCRS <- st_crs(point_HARV)
utm18nCRS
class(utm18nCRS)
## .csv to sf object
# specify the X Y coordinate values
# specify the crs
plot_locations_sp_HARV <- st_as_sf(plot_locations_HARV,
coords = c("easting", "northing"),
crs = utm18nCRS)
# Check the new CRS to see if correct
st_crs(plot_locations_sp-HARV)
# Now plot the object
ggplot() +
geom_sf(data = plot_locations_sp_HARV) +
ggtitle("Map of Plot Locations")
# Check the new CRS to see if correct
st_crs(plot_locations_sp_HARV)
# Now plot the object
ggplot() +
geom_sf(data = plot_locations_sp_HARV) +
ggtitle("Map of Plot Locations")
# Plot extent adding the aoi boundary
ggplot() +
geom_sf(data = aoi_boundary_HARV) +
geom_sf(data = plot_locations_sp_HARV) +
ggtitle("AOI Boundary Plot")
newplot_locations_HARV <-
read.csv("data/NEON-DS-Site-Layout-Files/HARV/HARV_2NewPhenPlots.csv")
str(newplot_locations_HARV)
geogCRS <- st_crs(country_boundary_US)
geogCRS
#ok why is naming so different for this one?
newPlot.Sp.HARV <- st_as_sf(newplot_loc_HARV,
coords = c("decimalLon", "decimalLat"),
crs = geogCRS)
#ok why is naming so different for this one?
newPlot.Sp.HARV <- st_as_sf(newplot_locations_HARV,
coords = c("decimalLon", "decimalLat"),
crs = geogCRS)
st_crs(newPlot.Sp.HARV)
ggplot() +
geom_sf(data = plot_locations_sp_HARV, color = "orange") +
geom_sf(data = newPlot.Sp.HARV, color = "lightblue") +
ggtitle("Map of All Plot Locations")
#Need to make sure layers is replaced with elevation in CHM_df layer
ggplot() +
geom_raster(data = HARV_CHM_df, aes(x = x, y = y, fill = HARV_chmCrop)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
coord_sf()
# this doesn't match the lesson
# typo here. in episode 4, the fill is HARV_dsmCrop not chmCrop
# this is wrong in the main lesson, a new CHM layer was read in.
CHM_HARV<- rast("data/NEON-DS-Airborne-Remote-Sensing/HARV/CHM/HARV_chmCrop.tif")
CHM_HARV_df <- as.data.frame(HARV_CHM, xy = TRUE)
#Need to make sure layers is replaced with elevation in CHM_df layer
ggplot() +
geom_raster(data = HARV_CHM_df, aes(x = x, y = y, fill = HARV_chmCrop)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
coord_sf()
#Need to make sure layers is replaced with elevation in CHM_df layer
ggplot() +
geom_raster(data = CHM_HARV_df, aes(x = x, y = y, fill = HARV_chmCrop)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
coord_sf()
#Now subset with cropping operation
CHM_HARV_Cropped <- crop(x = HARV_CHM, y = aoi_boundary_HARV)
CHM_HARV_Cropped_df <- as.data.frame(HARV_CHM_Cropped, xy = TRUE)
CHM_HARV_Cropped_df <- as.data.frame(CHM_HARV_Cropped, xy = TRUE)
#this plot will show the full CHM extent (green) is much larger than the
#cropped raster.
ggplot() +
geom_sf(data = st_as_sfc(st_bbox(HARV_CHM)), fill = "green",
color = "green", alpha = .2) +
geom_raster(data = HARV_CHM_Cropped_df,
aes(x = x, y = y, fill = Elevation)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
coord_sf()
#now plot the cropped images
ggplot() +
geom_raster(data = CHM_HARV_Cropped_df,
aes(x = x, y = y, fill = Elevation)) +
geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
coord_sf()
#this plot will show the full CHM extent (green) is much larger than the
#cropped raster.
ggplot() +
geom_sf(data = st_as_sfc(st_bbox(CHM_HARV)), fill = "green",
color = "green", alpha = .2) +
geom_raster(data = CHM_HARV_Cropped_df,
aes(x = x, y = y, fill = Elevation)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
coord_sf()
#this plot will show the full CHM extent (green) is much larger than the
#cropped raster.
ggplot() +
geom_sf(data = st_as_sfc(st_bbox(CHM_HARV)), fill = "green",
color = "green", alpha = .2) +
geom_raster(data = CHM_HARV_Cropped_df,
aes(x = x, y = y, fill = HARV_chmCrop)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
coord_sf()
#now plot the cropped images
ggplot() +
geom_raster(data = CHM_HARV_Cropped_df,
aes(x = x, y = y, fill = HARV_chmCrop)) +
geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
coord_sf()
# Look at the extent of all of the objects:
st_bbox(HARV_CHM)
# Look at the extent of all of the objects:
st_bbox(CHM_HARV)
st_bbox(CHM_HARV_Cropped)
st_bbox(aoi_boundary_HARV)
st_bbox(HARV_plot_locations_sp)
st_bbox(plot_locations_sp_HARV)
CHM_plots_HARVcrop <- crop(x = CHM_HARV, y = plot_locations_sp_HARV)
source("C:/Users/kliu/Desktop/geo-r-solutions/ep11.r", echo=TRUE)
CHM_plots_HARVcrop_df <- as.data.frame(CHM_plots_HARVcrop, xy = TRUE)
ggplot() +
geom_raster(data = CHM_plots_HARVcrop_df,
aes(x = x, y = y, fill = HARV_chmCrop)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
geom_sf(data = plot_locations_sp_HARV) +
coord_sf()
new_extent <- extent(732161.2, 732238.7, 4713249, 4713333)
class(new_extent)
new_extent <- ext(732161.2, 732238.7, 4713249, 4713333)
class(new_extent)
CHM_HARV_manual_cropped <- crop(x = CHM_HARV, y = new_extent)
CHM_HARV_manual_cropped_df <- as.data.frame(CHM_HARV_manual_cropped, xy = TRUE)
ggplot() +
geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
geom_raster(data = CHM_HARV_manual_cropped_df,
aes(x = x, y = y, fill = HARV_chmCrop)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
coord_sf()
#extract canopy values located within the aoi_boundary polygon
tree_height <- extract(x = CHM_HARV, y = aoi_boundary_HARV, raw = FALSE)
ggplot() +
geom_histogram(data = tree_height, aes(x = HARV_chmCrop)) +
ggtitle("Histogram of CHM Height Values (m)") +
xlab("Tree Height") +
ylab("Frequency of Pixels")
Summary(tree_height$HARV_chmCrop)
summary(tree_height$HARV_chmCrop)
## Summarize extracted raster values
mean_tree_height_AOI <- ext(x = CHM_HARV, y = aoi_boundary_HARV,
fun=mean)
## Summarize extracted raster values
mean_tree_height_AOI <- extract(x = CHM_HARV, y = aoi_boundary_HARV,
fun=mean)
mean_tree_height_AOI
## Extracting data using x,y, locations
mean_tree_height_tower <- extract(x = CHM_HARV,
y = st_buffer(point_HARV, dist = 20),
fun = mean)
mean_tree_height_tower
# Extract data at each plot location
mean_tree_height_plots_HARV <- extract(x = CHM_HARV,
y = st_buffer(plot_locations_sp_HARV,
dist = 20),
fun = mean)
mean_tree_height_plots_HARV
#plot data
ggplot(data = mean_tree_height_plots_HARV, aes(ID, HARV_chmCrop)) +
geom_col()+
ggtitle("Mean Tree Height at each Plot")+
xlab("Plot ID")+
ylab("Tree Height(m)")
library(tidyr)
library(scales)
NDVI_HARV_path <- "data/NEON-DS-Landsat-NDVI/HARV/2011/NDVI"
all_NDVI_HARV <- list.files(NDVI_HARV_path,
full.names = TRUE,
pattern = ".tif$")
#check the filenames
all_NDVI_HARV
#create a stack of raster using the rast() function
NDVI_HARV_stack <- rast(all_NDVI_HARV)
crs(NDVI_HARV_stack, proj = TRUE)
ext(NDVI_HARV_stack)
yres(NDVI_HARV_stack)
xres(NDVI_HARV_stack)
NDVI_HARV_stack_df <- as.data.frame(NDVI_HARV_stack, xy= TRUE) %>%
gather(vairable, vlaue, -(x:y))
#use ggplot and use facet wrapping to create a multipaneled plot
ggplot()+
geom_raster(data = NDVI_HARV_stack_df, aes(x = x,y = y, fill = value))+
facet_wrap(~ variable)
#using the gather function from tidyr
NDVI_HARV_stack_df <- as.data.frame(NDVI_HARV_stack, xy= TRUE) %>%
gather(variable, vlaue, -(x:y))
#using the gather function from tidyr
NDVI_HARV_stack_df <- as.data.frame(NDVI_HARV_stack, xy= TRUE) %>%
gather(variable, value, -(x:y))
#use ggplot and use facet wrapping to create a multipaneled plot
ggplot()+
geom_raster(data = NDVI_HARV_stack_df, aes(x = x,y = y, fill = value))+
facet_wrap(~ variable)
#metadata includes information on the scale factor:10000
#use some raster math to apply it
NDVI_HARV_stack <- NDVI_HARV_stack/10000
NDVI_HARV_stack_df <- as.data.frame(NDVI_HARV_stack, xy = TRUE) %>%
gather(variable,value, -(x:y))
ggplot() +
geom_raster(data = NDVI_HARV_stack_df , aes(x = x, y = y, fill = value)) +
facet_wrap(~variable)
#use histograms to explore the distribution of NDVI values
ggplot(NDVI_HARV_stack_df)+
geom_histogram(aes(values))+
facet_wrap(~variable)
#use histograms to explore the distribution of NDVI values
ggplot(NDVI_HARV_stack_df)+
geom_histogram(aes(value))+
facet_wrap(~variable)
#Explore Unusual Data Patterns
har_met_daily <-
read.csv("data/NEON-DS-Met-Time-Series/HARV/FisherTower-Met/hf001-06-daily-m.csv")
str(har_met_daily)
har_met_daily$date <- as.Date(har_met_daily$date, format = "%Y-%m-%d")
yr_11_daily_avg <- har_met_daily %>%
filter(between(date,as.Date('2011-01-01'), as.Date('2011-12-32')))
yr_11_daily_avg <- har_met_daily %>%
filter(between(date,as.Date('2011-01-01'), as.Date('2011-12-31')))
#plot the air temperature by julian day
ggplot() +
geom_point(data = yr_11_daily_avg, aes(jd, airt)) +
ggtitle("Daily Mean Air Temperature",
subtitle = "NEON Harvard Forest Field Site") +
xlab("Julian Day 2011") +
ylab("Mean Air Temperature (C)")
RGB_277 <- rast("data/NEON-DS-Landsat-NDVI/HARV/2011/RGB/277_HARV_landRGB.tif")
# NOTE: Fix the bands' names so they don't start with a number!
names(RGB_277) <- paste0("X", names(RGB_277))
RGB_277
# divide by 255 to keep color intensity
RGB_277 <- RGB_277/255
# convert to dataframe
RGB_277_df <- as.data.frame(RGB_277, xy = TRUE)
# create RGB colors
RGB_277_df$rgb <-
with(RGB_277_df, rgb(X277_HARV_landRGB_1, X277_HARV_landRGB_2,
X277_HARV_landRGB_3, 1))
# plot julian day 277:
ggplot() +
geom_raster(data=RGB_277_df, aes(x, y), fill=RGB_277_df$rgb) +
ggtitle("Julian day 277")
RGB_293 <- rast("data/NEON-DS-Landsat-NDVI/HARV/2011/RGB/293_HARV_landRGB.tif")
names(RGB_293) <- paste0("X", names(RGB_293))
RGB_293 <- RGB_293/255
RGB_293_df <- as.data.frame(RGB_293, xy = TRUE)
RGB_293_df$rgb <-
with(RGB_293_df, rgb(X293_HARV_landRGB_1, X293_HARV_landRGB_2,
X293_HARV_landRGB_3,1))
ggplot() +
geom_raster(data = RGB_293_df, aes(x, y), fill = RGB_293_df$rgb) +
ggtitle("Julian day 293")
