install.packages("installr")
rversion()
install.packages("rversions")
rversion()
rversions()
library("rversions")
rversions()
sessionInfo()
install.packages("tidyverse")
quarto check
# Install the template packages to your R library
install.packages(c("sandpaper", "varnish", "pegboard", "tinkr"))
install.packages(c("sandpaper", "varnish", "pegboard", "tinkr"))
#Install raster and terra if not installed already
install.pacakges(c("raster", "terra"))
#Install raster and terra if not installed already
install.packages(c("raster", "terra"))
# library(raster)
# library(rgdal)
library(ggplot2)
library(dplyr)
library(terra)
library(sf)
#In case we need to remake/reload the environment
DSM_HARV <-
+   raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
#In case we need to remake/reload the environment
DSM_HARV <-
+   rast("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
setwd("C:/Users/kliu/Desktop/geo-r-solutions")
#In case we need to remake/reload the environment
DSM_HARV <-
+   rast("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
DSM_HARV_df <- as.data.frame(HARV_DSM, xy = TRUE)
names(DSM_HARV_df)[names(DSM_HARV_df) == 'HARV_dsmCrop'] <- 'Elevation'
DSM_HARV_df <- as.data.frame(DSM_HARV, xy = TRUE)
names(DSM_HARV_df)[names(DSM_HARV_df) == 'HARV_dsmCrop'] <- 'Elevation'
#
DTM_HARV <- rast("data/NEON-DS-Airborne-Remote-Sensing/HARV/DTM/HARV_dtmCrop.tif")
DTM_HARV_df <- as.data.frame(HARV_DTM, xy = TRUE)
DTM_HARV_df <- as.data.frame(DTM_HARV, xy = TRUE)
# read in a clean CHM if you need to. Don't use the layer made in episode 4
CHM_HARV<- rast("data/NEON-DS-Airborne-Remote-Sensing/HARV/CHM/HARV_chmCrop.tif")
CHM_HARV_df <- as.data.frame(HARV_CHM, xy = TRUE)
#names(CHM_HARV_df)[names(CHM_HARV_df) == 'HARV_chmCrop'] <- 'Elevation'
#
aoi_boundary_HARV <- st_read( "data/NEON-DS-Site-Layout-Files/HARV/HarClip_UTMZ18.shp")
lines_HARV <- st_read("data/NEON-DS-Site-Layout-Files/HARV/HARV_roads.shp")
point_HARV <- st_read("data/NEON-DS-Site-Layout-Files/HARV/HARVtower_UTM18N.shp")
#
country_boundary_US <- st_read(
"data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-Boundary-Dissolved-States.shp") %>%
+   st_zm()
#
state_boundary_US <- st_read(
"data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-State-Boundaries-Census-2014.shp") %>%
+   st_zm()
st_bbox(CHM_HARV_Cropped)
#Import a new csv containing plot coordinates
plot_locations_HARV <-
read.csv("data/NEON-DS-Site-Layout-Files/HARV/HARV_PlotLocations.csv")
# Create CRS object that we can use to define the CRS of our new sf object when we create it
utm18nCRS <- st_crs(point_HARV)
utm18nCRS
## .csv to sf object
# specify the X Y coordinate values
# specify the crs
plot_locations_sp_HARV <- st_as_sf(plot_locations_HARV,
coords = c("easting", "northing"),
crs = utm18nCRS)
# Check the new CRS to see if correct
st_crs(plot_locations_sp_HARV)
newplot_locations_HARV <-
read.csv("data/NEON-DS-Site-Layout-Files/HARV/HARV_2NewPhenPlots.csv")
str(newplot_locations_HARV)
geogCRS <- st_crs(country_boundary_US)
geogCRS
#ok why is naming so different for this one?
newPlot.Sp.HARV <- st_as_sf(newplot_locations_HARV,
coords = c("decimalLon", "decimalLat"),
crs = geogCRS)
# we will use census data for this portion, read in the following line:
state_boundary_US <- st_read("data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-State-Boundaries-Census-2014.shp") %>%
st_zm()
# create a boundary layer of the United States to make it look nicer.
# Import US boundary dissolved states
country_boundary_US <- st_read("data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-Boundary-Dissolved-States.shp") %>%
st_zm()
## .csv to sf object
# specify the X Y coordinate values
# specify the crs
plot_locations_sp_HARV <- st_as_sf(plot_locations_HARV,
coords = c("easting", "northing"),
crs = utm18nCRS)
# Check the new CRS to see if correct
st_crs(plot_locations_sp_HARV)
newplot_locations_HARV <-
read.csv("data/NEON-DS-Site-Layout-Files/HARV/HARV_2NewPhenPlots.csv")
str(newplot_locations_HARV)
geogCRS <- st_crs(country_boundary_US)
geogCRS
#ok why is naming so different for this one?
newPlot.Sp.HARV <- st_as_sf(newplot_locations_HARV,
coords = c("decimalLon", "decimalLat"),
crs = geogCRS)
#Now subset with cropping operation
CHM_HARV_Cropped <- crop(x = HARV_CHM, y = aoi_boundary_HARV)
#Now subset with cropping operation
CHM_HARV_Cropped <- crop(x = CHM_HARV, y = aoi_boundary_HARV)
CHM_HARV_Cropped_df <- as.data.frame(CHM_HARV_Cropped, xy = TRUE)
#this plot will show the full CHM extent (green) is much larger than the
#cropped raster.
ggplot() +
geom_sf(data = st_as_sfc(st_bbox(CHM_HARV)), fill = "green",
color = "green", alpha = .2) +
geom_raster(data = CHM_HARV_Cropped_df,
aes(x = x, y = y, fill = HARV_chmCrop)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
coord_sf()
# Look at the extent of all of the objects:
st_bbox(CHM_HARV)
st_bbox(CHM_HARV_Cropped)
st_bbox(aoi_boundary_HARV)
st_bbox(plot_locations_sp_HARV)
CHM_plots_HARVcrop <- crop(x = CHM_HARV, y = plot_locations_sp_HARV)
CHM_plots_HARVcrop_df <- as.data.frame(CHM_plots_HARVcrop, xy = TRUE)
new_extent <- ext(732161.2, 732238.7, 4713249, 4713333)
class(new_extent)
CHM_HARV_manual_cropped <- crop(x = CHM_HARV, y = new_extent)
CHM_HARV_manual_cropped_df <- as.data.frame(CHM_HARV_manual_cropped, xy = TRUE)
ggplot() +
geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
geom_raster(data = CHM_HARV_manual_cropped_df,
aes(x = x, y = y, fill = HARV_chmCrop)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
coord_sf()
#extract canopy values located within the aoi_boundary polygon
tree_height <- extract(x = CHM_HARV, y = aoi_boundary_HARV, raw = FALSE)
ggplot() +
geom_histogram(data = tree_height, aes(x = HARV_chmCrop)) +
ggtitle("Histogram of CHM Height Values (m)") +
xlab("Tree Height") +
ylab("Frequency of Pixels")
summary(tree_height$HARV_chmCrop)
## Summarize extracted raster values
mean_tree_height_AOI <- extract(x = CHM_HARV, y = aoi_boundary_HARV,
fun=mean)
mean_tree_height_AOI
## Extracting data using x,y, locations
mean_tree_height_tower <- extract(x = CHM_HARV,
y = st_buffer(point_HARV, dist = 20),
fun = mean)
mean_tree_height_tower
# Extract data at each plot location
mean_tree_height_plots_HARV <- extract(x = CHM_HARV,
y = st_buffer(plot_locations_sp_HARV,
dist = 20),
fun = mean)
mean_tree_height_plots_HARV
#plot data
ggplot(data = mean_tree_height_plots_HARV, aes(ID, HARV_chmCrop)) +
geom_col()+
ggtitle("Mean Tree Height at each Plot")+
xlab("Plot ID")+
ylab("Tree Height(m)")
library(scales)
NDVI_HARV_path <- "data/NEON-DS-Landsat-NDVI/HARV/2011/NDVI"
all_NDVI_HARV <- list.files(NDVI_HARV_path,
full.names = TRUE,
pattern = ".tif$")
#check the filenames
all_NDVI_HARV
#create a stack of raster using the rast() function
NDVI_HARV_stack <- rast(all_NDVI_HARV)
crs(NDVI_HARV_stack, proj = TRUE)
ext(NDVI_HARV_stack)
yres(NDVI_HARV_stack)
xres(NDVI_HARV_stack)
#using the gather function from tidyr
NDVI_HARV_stack_df <- as.data.frame(NDVI_HARV_stack, xy= TRUE) %>%
gather(variable, value, -(x:y))
#use ggplot and use facet wrapping to create a multipaneled plot
ggplot()+
geom_raster(data = NDVI_HARV_stack_df, aes(x = x,y = y, fill = value))+
facet_wrap(~ variable)
#using the gather function from tidyr
NDVI_HARV_stack_df <- as.data.frame(NDVI_HARV_stack, xy= TRUE) %>%
gather(variable, value, -(x:y))
library(terra)
library(tidyr)
library(ggplot2)
NDVI_HARV_path <- "data/NEON-DS-Landsat-NDVI/HARV/2011/NDVI"
all_NDVI_HARV <- list.files(NDVI_HARV_path,
full.names = TRUE,
pattern = ".tif$")
#check the filenames
all_NDVI_HARV
#create a stack of raster using the rast() function
NDVI_HARV_stack <- rast(all_NDVI_HARV)
crs(NDVI_HARV_stack, proj = TRUE)
#using the gather function from tidyr
NDVI_HARV_stack_df <- as.data.frame(NDVI_HARV_stack, xy= TRUE) %>%
gather(variable, value, -(x:y))
#use ggplot and use facet wrapping to create a multipaneled plot
ggplot()+
geom_raster(data = NDVI_HARV_stack_df, aes(x = x,y = y, fill = value))+
facet_wrap(~ variable)
#metadata includes information on the scale factor:10000
#use some raster math to apply it
NDVI_HARV_stack <- NDVI_HARV_stack/10000
#recreate plot from previous exercise with new scale
NDVI_HARV_stack_df <- as.data.frame(NDVI_HARV_stack, xy = TRUE) %>%
gather(variable,value, -(x:y))
ggplot() +
geom_raster(data = NDVI_HARV_stack_df , aes(x = x, y = y, fill = value)) +
facet_wrap(~variable)
#use histograms to explore the distribution of NDVI values
ggplot(NDVI_HARV_stack_df)+
geom_histogram(aes(value))+
facet_wrap(~variable)
#Explore Unusual Data Patterns
har_met_daily <-
read.csv("data/NEON-DS-Met-Time-Series/HARV/FisherTower-Met/hf001-06-daily-m.csv")
str(har_met_daily)
#use as.Date() to convert characters to be treated as dates
har_met_daily$date <- as.Date(har_met_daily$date, format = "%Y-%m-%d")
#filter out only the 2011 data
yr_11_daily_avg <- har_met_daily %>%
filter(between(date,as.Date('2011-01-01'), as.Date('2011-12-31')))
#plot the air temperature by julian day
ggplot() +
geom_point(data = yr_11_daily_avg, aes(jd, airt)) +
ggtitle("Daily Mean Air Temperature",
subtitle = "NEON Harvard Forest Field Site") +
xlab("Julian Day 2011") +
ylab("Mean Air Temperature (C)")
