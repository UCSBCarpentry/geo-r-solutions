install.packages("installr")
rversion()
install.packages("rversions")
rversion()
rversions()
library("rversions")
rversions()
sessionInfo()
install.packages("tidyverse")
quarto check
# Install the template packages to your R library
install.packages(c("sandpaper", "varnish", "pegboard", "tinkr"))
install.packages(c("sandpaper", "varnish", "pegboard", "tinkr"))
#Install raster and terra if not installed already
install.pacakges(c("raster", "terra"))
#Install raster and terra if not installed already
install.packages(c("raster", "terra"))
setwd("C:/Users/kliu/Desktop/geo-r-solutions")
# library(raster)
# library(rgdal)
library(ggplot2)
library(dplyr)
library(terra)
getwd()
describe("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
DSM_HARV <-
rast("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
DSM_HARV
# you can force it to calculate using
# all values()
summary(values(DSM_HARV))
# or the tidy way
values(DSM_HARV) %>% summary()
# ggplot uses dataframes,
# so get used to making them
# for single-channel rasters
DSM_HARV_df <- as.data.frame(DSM_HARV, xy = TRUE)
# change the name of the column to better reflect what it is:
# this isn't in the lesson
names(DSM_HARV_df)[names(DSM_HARV_df) == 'HARV_dsmCrop'] <- 'Elevation'
str(DSM_HARV_df)
ggplot() +
geom_raster(data = DSM_HARV_df , aes(x = x, y = y, fill = Elevation)) +
scale_fill_viridis_c() +
coord_quickmap()
crs(DSM_HARV)
# this one doesn't show any.
any(is.na(DSM_HARV_df$Elevation))
# this one shows them explicitly!
DSM_HARV_info
# capture.output is 'base R'
DSM_HARV_info <- capture.output(
describe("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
)
# this one shows them explicitly!
DSM_HARV_info
# this one doesn't show any.
any(is.na(DSM_HARV_df$Elevation))
# challenge:
describe("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
sources(DSM_HARV)
describe(sources(DSM_HARV))
# this also shows our current raster doesn't have any NA's.
summary(DSM_HARV)
cd ..
# mutate into bins
# 3 equal breaks
DSM_HARV_df <- DSM_HARV_df %>%
mutate(fct_elevation = cut(Elevation, breaks = 3))
# now you will see a 4th variable
str(DSM_HARV_df)
ggplot() +
geom_bar(data = DSM_HARV_df, aes(fct_elevation))
unique(DSM_HARV_df$fct_elevation)
# how many pixels in each class?
DSM_HARV_df %>%
group_by(fct_elevation) %>%
count()
# mutate into your own specified bins
custom_bins <- c(300, 350, 400, 450)
DSM_HARV_df <- DSM_HARV_df %>%
mutate(fct_elevation_2 = cut(Elevation, breaks = custom_bins))
unique(DSM_HARV_df$fct_elevation_2)
# this highlights the few over 400.
# like we did visually previously
ggplot() +
geom_bar(data = DSM_HARV_df, aes(fct_elevation_2))
# and get the count of pixels in each bin
DSM_HARV_df %>%
group_by(fct_elevation_2) %>%
count()
# map it
ggplot() +
geom_raster(data = DSM_HARV_df , aes(x = x, y = y, fill = fct_elevation_2)) +
coord_quickmap()
# let's talk aesthetics
# that default color scheme doesn't work so well.
# try this one:
terrain.colors(3)
ggplot() +
geom_raster(data = DSM_HARV_df , aes(x = x, y = y,
fill = fct_elevation_2)) +
scale_fill_manual(values = terrain.colors(3)) +
coord_quickmap()
# save your colors in an object for re-use
my_col <- terrain.colors(3)
# run the plot again, but
# add a title to the legend
ggplot() +
geom_raster(data = DSM_HARV_df , aes(x = x, y = y,
fill = fct_elevation_2)) +
scale_fill_manual(values = my_col, name = "Elevation") +
coord_quickmap()
# this one's not complete in the lesson: x and y labels:
ggplot() +
geom_raster(data = DSM_HARV_df , aes(x = x, y = y,
fill = fct_elevation_2)) +
scale_fill_manual(values = my_col,
name="Elevation") +
xlab("Easting") +
ylab("Northing") +
coord_quickmap()
DSM_HARV_df <- DSM_HARV_df  %>%
mutate(fct_elevation_6 = cut(Elevation, breaks = 6))
my_col <- terrain.colors(6)
ggplot() +
geom_raster(data = DSM_HARV_df , aes(x = x, y = y,
fill = fct_elevation_6)) +
scale_fill_manual(values = my_col, name = "Elevation") +
ggtitle("Classified Elevation Map - NEON Harvard Forest Field Site") +
xlab("UTM Easting Coordinate (m)") +
ylab("UTM Northing Coordinate (m)") +
coord_quickmap()
# layering rasters
DSM_hill_HARV <-
rast("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_DSMhill.tif")
DSM_hill_HARV
DSM_hill_HARV_df <- as.data.frame(DSM_hill_HARV, xy = TRUE)
str(DSM_hill_HARV_df)
# plot that with no legend
ggplot() +
geom_raster(data = DSM_hill_HARV_df,
aes(x = x, y = y, alpha = HARV_DSMhill)) +
scale_alpha(range =  c(0.15, 0.65), guide = "none") +
coord_quickmap()
# the top layer needs an alpha if you hope to see it.
# plots build in the order you call the geom's
ggplot() +
geom_raster(data = DSM_HARV_df ,
aes(x = x, y = y,
fill = Elevation)) +
geom_raster(data = DSM_hill_HARV_df,
aes(x = x, y = y,
alpha = HARV_DSMhill)) +
scale_fill_viridis_c() +
scale_alpha(range = c(0.15, 0.65), guide = "none") +
ggtitle("Elevation with hillshade") +
coord_quickmap()
