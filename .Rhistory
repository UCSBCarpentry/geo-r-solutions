library(dplyr)
library(raster)
library(rgdal)
library(ggplot2)
library(dplyr)
GDALinfo("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
HARV_DSM_info <- capture.output(
GDALinfo("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
)
HARV_DSM
HARV_DSM <-
raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
HARV_DSM
summary(HARV_DSM)
summary(HARV_DSM, maxsamp = ncell(HARV_DSM))
HARV_DSM_df <- as.data.frame(HARV_DSM, xy = TRUE)
str(HARV_DSM_df)
ggplot() +
geom_raster(data = HARV_DSM_df , aes(x = x, y = y, fill = HARV_dsmCrop)) +
scale_fill_viridis_c() +
coord_quickmap()
str(HARV_DSM_df)
names(HARV_DSM_df)[names(HARV_DSM_df) == 'HARV_dsmCrop'] <- 'Altitude'
str(HARV_DSM_df)
ggplot() +
geom_raster(data = HARV_DSM_df , aes(x = x, y = y, fill = Altitude)) +
scale_fill_viridis_c() +
coord_quickmap()
crs(HARV_DSM)
ggplot() +
geom_raster(data = HARV_DSM_df , aes(x = x, y = y, fill = Altitude)) +
scale_fill_viridis_c(na.value = 'deeppink') +
coord_quickmap()
HARV_DSM_info
summary(HARV_DSM_df)
summary(HARV_DSM)
# dealing with bad values
# lesson shows a figure that it doesn't make.
ggplot() +
geom_raster(data = HARV_DSM_df , aes(x = x, y = y, fill = Altitude)) +
scale_fill_viridis_c(Altitude > 400 = 'deeppink') +
coord_quickmap()
# make sure we have the needed libraries
library(sf)
library(raster)
library(ggplot2)
# vector files are shapefiles
aoi_boundary_HARV <- st_read(
"data/NEON-DS-Site-Layout-Files/HARV/HarClip_UTMZ18.shp")
# there are 18 types of shapefiles.
# this one is polygons
st_geometry_type(aoi_boundary_HARV)
# and it has CRS metadata baked into it
st_crs(aoi_boundary_HARV)
# one of those pieces of data is a bounding box
# you will need these in your future life
st_bbox(aoi_boundary_HARV)
# mostly we want to make maps
# this is not a useful map
ggplot() +
geom_sf(data = aoi_boundary_HARV, size = 3, color = "black", fill = "cyan1") +
ggtitle("AOI Boundary Plot") +
coord_sf()
# Let's move on to point and line shapefiles
HARV_lines <- st_read("data/NEON-DS-Site-Layout-Files/HARV/HARV_roads.shp")
HARV_points <- st_read("data/NEON-DS-Site-Layout-Files/HARV/HARVtower_UTM18N.shp")
# that's a "spatial" "dataframe"
class(HARV_lines)
# it's got a CRS
# just like raster data does
# what's the raster version of the command?
st_crs(HARV_lines)
# bounding boxes make more sense when your
# shapefile is more than just a single rectangle
st_bbox(HARV_lines)
# a good demo here would be to make
# a good demo here would be to make
# shapefiles of the boundng boxes and
# a good demo here would be to make
# shapefiles of the boundng boxes and
# overlay them
# a good demo here would be to make
# shapefiles of the boundng boxes and
# overlay them
# this shows us the attribute table
# there's only one point
View(HARV_points)
# outputting only the variable names
# shows you a count of the objects
# and some other metadata
# and a sort of 'HEAD'
HARV_points
HARV_lines
# we can count the attributes
ncol(HARV_lines)
# we can view the attribute names
names(HARV_lines)
names(HARV_points)
# our old friend helps too:
head(HARV_lines)
# challenge is here
HARV_points$Ownership
# call out a whole column / attribute:
HARV_lines$TYPE
# only the unique values
levels(HARV_lines$TYPE)
# all this stuff works with the tidyverse
# so you can use pipes
HARV_footpath <- HARV_lines %>%
filter(TYPE == "footpath")
nrow(HARV_footpath)
# all this stuff works with the tidyverse
# so you can use pipes
HARV_footpath <- HARV_lines %>%
filter(TYPE == "footpath")
# only the unique values
levels(HARV_lines$TYPE)
# all this stuff works with the tidyverse
# so you can use pipes
HARV_footpath <- HARV_lines %>%
filter(TYPE == "footpath")
nrow(HARV_footpath)
# must convert that plain text to a factor
HARV_lines$TYPE <- factor(HARV_lines$TYPE)
# all this stuff works with the tidyverse
# so you can use pipes
HARV_footpath <- HARV_lines %>%
filter(TYPE == "footpath")
# must convert that plain text to a factor
HARV_lines$TYPE <- factor(HARV_lines$TYPE)
# all this stuff works with the tidyverse
# so you can use pipes
HARV_footpath <- HARV_lines %>%
filter(TYPE == "footpath")
View(HARV_lines)
View(HARV_lines)
library(raster)
library(rgdal)
library(ggplot2)
library(dplyr)
# all this stuff works with the tidyverse
# so you can use pipes
HARV_footpath <- HARV_lines %>%
filter(TYPE == "footpath")
nrow(HARV_footpath)
head(HARV_footpath)
# now the exciting part, let's map it
ggplot() +
geom_sf(data = HARV_footpath) +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Footpaths") +
coord_sf()
ggplot() +
geom_sf(data = HARV_footpath, aes(color = factor(OBJECTID)), size = 1.5) +
labs(color = 'Footpath ID') +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Footpaths") +
coord_sf()
# challenge 1
boardwalk_HARV <- HARV_lines %>%
filter(TYPE == "boardwalk")
# there's 1 row
nrow(boardwalk_HARV)
ggplot() +
geom_sf(data = boardwalk_HARV, size = 1.5) +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Boardwalks") +
coord_sf()
# challenge 2
stoneWall_HARV <- HARV_lines %>%
filter(TYPE == "stone wall")
nrow(stoneWall_HARV)
ggplot() +
geom_sf(data = stoneWall_HARV, aes(color = factor(OBJECTID)), size = 1.5) +
labs(color = 'Wall ID') +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Stonewalls") +
coord_sf()
# this just moves on in the lesson
# but if we want to see unique values,
# we have to get that column to be a factor
levels(HARV_lines$TYPE)
# now we can see that we need 4 colors
HARV_lines$TYPE <- factor(HARV_lines$TYPE)
levels(HARV_lines$TYPE)
road_colors <- c("blue", "green", "navy", "purple")
ggplot() +
geom_sf(data = HARV_lines, aes(color = TYPE)) +
scale_color_manual(values = road_colors) +
labs(color = 'Road Type') +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Roads & Trails") +
coord_sf()
# use different line widths
line_widths <- c(1, 2, 3, 4)
ggplot() +
geom_sf(data = HARV_lines, aes(color = TYPE, size = TYPE)) +
scale_color_manual(values = road_colors) +
labs(color = 'Road Type') +
scale_size_manual(values = line_widths) +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Roads & Trails - Line width varies") +
coord_sf()
# they come out in the order they are stored,
# so you can assign in that order
levels(HARV_lines$TYPE)
line_width <- c(1, 3, 2, 6)
ggplot() +
geom_sf(data = HARV_lines, aes(size = TYPE)) +
scale_size_manual(values = line_width) +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Roads & Trails - Line width varies") +
coord_sf()
# work on that legend
ggplot() +
geom_sf(data = HARV_lines, aes(color = TYPE), size = 1.5) +
scale_color_manual(values = road_colors) +
labs(color = 'Road Type') +
ggtitle("NEON Harvard Forest Field Site",
subtitle = "Roads & Trails - Default Legend") +
coord_sf()
ggplot() +
geom_sf(data = HARV_lines, aes(color = TYPE), size = 1.5) +
scale_color_manual(values = road_colors) +
labs(color = 'Road Type') +
theme(legend.text = element_text(size = 20),
legend.box.background = element_rect(size = 1)) +
ggtitle("NEON Harvard Forest Field Site",
subtitle = "Roads & Trails - Modified Legend") +
coord_sf()
ggplot() +
geom_sf(data = HARV_lines, aes(color = TYPE), size = 1.5) +
scale_color_manual(values = new_colors) +
labs(color = 'Road Type') +
theme(legend.text = element_text(size = 20),
legend.box.background = element_rect(size = 1)) +
ggtitle("NEON Harvard Forest Field Site",
subtitle = "Roads & Trails - Pretty Colors") +
coord_sf()
# make the colors less obnoxious
new_colors <- c("springgreen", "blue", "magenta", "orange")
ggplot() +
geom_sf(data = HARV_lines, aes(color = TYPE), size = 1.5) +
scale_color_manual(values = new_colors) +
labs(color = 'Road Type') +
theme(legend.text = element_text(size = 20),
legend.box.background = element_rect(size = 1)) +
ggtitle("NEON Harvard Forest Field Site",
subtitle = "Roads & Trails - Pretty Colors") +
coord_sf()
# bicycle challenge
class(HARV_lines$BicyclesHo)
levels(HARV_lines$BicyclesHo)
lines_removeNA <- HARV_lines[!is.na(HARV_lines$BicyclesHo),]
HARV_lines$TYPE <- factor(HARV_lines$TYPE)
HARV_lines$TYPE <- factor(HARV_lines$TYPE)
levels(HARV_lines$BicyclesHo)
# bicycle challenge
class(HARV_lines$BicyclesHorse)
# same iss ue as roadtype
levels(HARV_lines$BicyclesHorse)
# same iss ue as roadtype
levels(HARV_lines$BicyclesHorse)
HARV_lines$BicyclesHorse <- factor(HARV_lines$BicyclesHorse)
# same iss ue as roadtype
levels(HARV_lines$BikeHorse)
HARV_lines$BikeHorse <- factor(HARV_lines$BikeHorse)
# same iss ue as roadtype
levels(HARV_lines$BIKEHORSE)
HARV_lines$BIKEHORSE <- factor(HARV_lines$BIKEHORSE)
levels(HARV_lines$BIKEHORSE)
# it's not clear why we should get rid of these
lines_removeNA <- HARV_lines[!is.na(HARV_lines$BicyclesHo),]
# First, create a data frame with only those roads where bicycles and horses are allowed
lines_showHarv <- lines_removeNA %>% filter(BicyclesHo == "Bicycles and Horses Allowed")
# Next, visualise using ggplot
ggplot() +
geom_sf(data = HARV_lines) +
geom_sf(data = lines_showHarv, aes(color = BicyclesHo), size = 2) +
scale_color_manual(values = "magenta") +
ggtitle("NEON Harvard Forest Field Site", subtitle = "Roads Where Bikes and Horses Are Allowed") +
coord_sf()
