install.packages("installr")
rversion()
install.packages("rversions")
rversion()
rversions()
library("rversions")
rversions()
sessionInfo()
install.packages("tidyverse")
quarto check
# Install the template packages to your R library
install.packages(c("sandpaper", "varnish", "pegboard", "tinkr"))
install.packages(c("sandpaper", "varnish", "pegboard", "tinkr"))
#Install raster and terra if not installed already
install.pacakges(c("raster", "terra"))
#Install raster and terra if not installed already
install.packages(c("raster", "terra"))
setwd("C:/Users/kliu/Desktop/geo-r-solutions")
# library(raster)
library(rgdal)
library(raster)
#### Kristi edit up to here: What is the new 'reclassify'? I ran 75 and it says it doesn't exist
# dealing with bad values
# lesson shows a figure that it doesn't make.
# here's the code:
DSM_highvals <- reclassify(DSM_HARV, rcl = c(0, 400, NA_integer_, 400, 420, 1L), include.lowest = TRUE)
getwd()
describe("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/DSM_HARVCrop.tif")
library(ggplot2)
library(dplyr)
library(terra)
describe("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/DSM_HARVCrop.tif")
describe("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
describe("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
DSM_HARV_info <- capture.output(
describe("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
)
DSM_HARV <-
rast("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
DSM_HARV
summary(DSM_HARV)
summary(values(DSM_HARV))
# or the tidy way
values(DSM_HARV) %>% summary()
# as usual, ggplot wants dataframes
DSM_HARV_df <- as.data.frame(DSM_HARV, xy = TRUE)
str(DSM_HARV_df)
# change the name of the column to better reflect what it is:
# this isn't in the lesson
names(DSM_HARV_df)[names(DSM_HARV_df) == 'HARV_dsmCrop'] <- 'Elevation'
str(DSM_HARV_df)
ggplot() +
geom_raster(data = DSM_HARV_df , aes(x = x, y = y, fill = Elevation)) +
scale_fill_viridis_c() +
coord_quickmap()
crs(DSM_HARV)
# calculating maxes and mins
minmax(DSM_HARV)
min(values(DSM_HARV))
max(values(DSM_HARV))
ggplot() +
geom_raster(data = DSM_HARV_df , aes(x = x, y = y, fill = Elevation)) +
scale_fill_viridis_c(na.value = 'deeppink') +
coord_quickmap()
# no value = -9999
DSM_HARV_info
summary(DSM_HARV_df)
# this shows our current raster doesn't have any.
summary(DSM_HARV)
#### Kristi edit up to here: What is the new 'reclassify'? I ran 75 and it says it doesn't exist
# dealing with bad values
# lesson shows a figure that it doesn't make.
# here's the code:
DSM_highvals <- reclassify(DSM_HARV, rcl = c(0, 400, NA_integer_, 400, 420, 1L), include.lowest = TRUE)
#### Kristi edit up to here: What is the new 'reclassify'? I ran 75 and it says it doesn't exist
# dealing with bad values
# lesson shows a figure that it doesn't make.
# here's the code:
DSM_highvals <- subst(DSM_HARV, rcl = c(0, 400, NA_integer_, 400, 420, 1L), include.lowest = TRUE)
#### Kristi edit up to here: What is the new 'reclassify'? I ran 75 and it says it doesn't exist
# dealing with bad values
# lesson shows a figure that it doesn't make.
# here's the code:
DSM_highvals <- subst(DSM_HARV, rcl = c(0, 400, NA_integer_, 400, 420, 1L))
#### Kristi edit up to here: What is the new 'reclassify'? I ran 75 and it says it doesn't exist
# dealing with bad values
# lesson shows a figure that it doesn't make.
# here's the code:
DSM_highvals <- classify(DSM_HARV, rcl = c(0, 400, NA_integer_, 400, 420, 1L), include.lowest = TRUE)
DSM_highvals <- as.data.frame(DSM_highvals, xy = TRUE)
str(DSM_highvals)
# change that name again
names(DSM_highvals)[names(DSM_highvals) == 'DSM_HARVCrop'] <- 'Elevation'
str(DSM_highvals)
ggplot() +
geom_raster(data = DSM_HARV_df, aes(x = x, y = y, fill = Elevation)) +
scale_fill_viridis_c() +
# use reclassified raster data as an annotation
annotate(geom = 'raster', x = DSM_highvals$x, y = DSM_highvals$y, fill = scales::colour_ramp('deeppink')(DSM_highvals$Elevation)) +
ggtitle("Elevation Data", subtitle = "Highlighting values > 400m") +
coord_quickmap()
rlang::last_trace()
### Kristi here now. What is annotate's inherited f(x)
ggplot() +
geom_raster(data = DSM_HARV_df, aes(x = x, y = y, fill = 'Elevation')) +
scale_fill_viridis_c() +
# use reclassified raster data as an annotation
annotate(geom = 'raster', x = DSM_highvals$x, y = DSM_highvals$y, fill = scales::colour_ramp('deeppink')(DSM_highvals$Elevation)) +
ggtitle("Elevation Data", subtitle = "Highlighting values > 400m") +
coord_quickmap()
str(DSM_highvals)
### Kristi here now. What is annotate's inherited f(x)
ggplot() +
geom_raster(data = DSM_HARV_df, aes(x = x, y = y, fill = 'HARV_dsmCrop')) +
scale_fill_viridis_c() +
# use reclassified raster data as an annotation
annotate(geom = 'raster', x = DSM_highvals$x, y = DSM_highvals$y, fill = scales::colour_ramp('deeppink')(DSM_highvals$Elevation)) +
ggtitle("Elevation Data", subtitle = "Highlighting values > 400m") +
coord_quickmap()
### Kristi here now. What is annotate's inherited f(x)
ggplot() +
geom_raster(data = DSM_HARV_df, aes(x = x, y = y, fill = Elevation)) +
scale_fill_viridis_c() +
# use reclassified raster data as an annotation
annotate(geom = 'raster', x = DSM_highvals$x, y = DSM_highvals$y, fill = scales::colour_ramp('deeppink')(DSM_highvals$HARV_dsmCrop)) +
ggtitle("Elevation Data", subtitle = "Highlighting values > 400m") +
coord_quickmap()
str(DSM_highvals)
# change that name again
names(DSM_highvals)[names(DSM_highvals) == 'DSM_HARVCrop'] <- 'Elevation'
str(DSM_highvals)
# dealing with bad values
# lesson shows a figure that it doesn't make.
# here's the code:
DSM_highvals <- classify(DSM_HARV, rcl = c(0, 400, NA_integer_, 400, 420, 1L), include.lowest = TRUE)
DSM_highvals <- as.data.frame(DSM_highvals, xy = TRUE)
# no value = -9999
DSM_HARV_info
DSM_HARV_info <- capture.output(
describe("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
)
DSM_HARV <-
rast("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
DSM_HARV
summary(DSM_HARV)
summary(values(DSM_HARV))
# or the tidy way
values(DSM_HARV) %>% summary()
# as usual, ggplot wants dataframes
DSM_HARV_df <- as.data.frame(DSM_HARV, xy = TRUE)
str(DSM_HARV_df)
# change the name of the column to better reflect what it is:
# this isn't in the lesson
names(DSM_HARV_df)[names(DSM_HARV_df) == 'HARV_dsmCrop'] <- 'Elevation'
str(DSM_HARV_df)
ggplot() +
geom_raster(data = DSM_HARV_df , aes(x = x, y = y, fill = Elevation)) +
scale_fill_viridis_c() +
coord_quickmap()
# no value = -9999
DSM_HARV_info
summary(DSM_HARV_df)
View(DSM_HARV_df)
DSM_highvals <- as.data.frame(DSM_highvals, xy = TRUE)
str(DSM_highvals)
str(DSM_highvals)
# change that name again
names(DSM_highvals)[names(DSM_highvals) == 'DSM_HARVCrop'] <- 'Elevation'
str(DSM_highvals)
### Kristi here now. What is annotate's inherited f(x)
ggplot() +
geom_raster(data = DSM_HARV_df, aes(x = x, y = y, fill = Elevation)) +
scale_fill_viridis_c() +
# use reclassified raster data as an annotation
annotate(geom = 'raster', x = DSM_highvals$x, y = DSM_highvals$y, fill = scales::colour_ramp('deeppink')(DSM_highvals$Elevation)) +
ggtitle("Elevation Data", subtitle = "Highlighting values > 400m") +
coord_quickmap()
ggplot() +
geom_raster(data = DSM_HARV_df, aes(x = x, y = y, fill = Elevation)) +
scale_fill_viridis_c() +
# use reclassified raster data as an annotation
annotate(geom = 'raster', x = DSM_highvals$x, y = DSM_highvals$y, fill = scales::colour_ramp('deeppink')(DSM_highvals$Elevation)) +
ggtitle("Elevation Data", subtitle = "Highlighting values > 400m") +
coord_quickmap()
ggplot() +
geom_raster(data = DSM_HARV_df, aes(x = x, y = y, fill = Elevation)) +
scale_fill_viridis_c() +
# use reclassified raster data as an annotation
annotate(geom = 'raster', x = DSM_highvals$x, y = DSM_highvals$y, fill = scales::colour_ramp('deeppink')(DSM_highvals$Elevation)) +
ggtitle("Elevation Data", subtitle = "Highlighting values > 400m") +
coord_quickmap()
str(DSM_highvals)
ggplot() +
geom_histogram(data = DSM_HARV_df, aes(Elevation))
# Challenge
# geting info about another raster
GDALinfo("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_DSMhill.tif")
# Challenge
# getting info about another raster
describe("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_DSMhill.tif")
# our existing dataframe
HARV_DSM_df
DSM_HARV <-
rast("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
# as usual, ggplot wants dataframes
DSM_HARV_df <- as.data.frame(DSM_HARV, xy = TRUE)
# our existing dataframe
DSM_Harv_df
# mutate into bins
DSM_Harv_df <- DSM_Harv_df %>%
mutate(fct_elevation = cut(Altitude, breaks = 3))
DSM_HARV <-
rast("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
DSM_HARV_df <- as.data.frame(DSM_HARV, xy = TRUE)
# our existing dataframe
DSM_Harv_df
# mutate into bins
DSM_Harv_df <- DSM_Harv_df %>%
mutate(fct_elevation = cut(Altitude, breaks = 3))
# our existing dataframe
DSM_HARV_df
# mutate into bins
DSM_HARV_df<- DSM_Harv_df %>%
mutate(fct_elevation = cut(Elevation, breaks = 3))
# mutate into bins
DSM_HARV_df<- DSM_HARV_df %>%
mutate(fct_elevation = cut(Elevation, breaks = 3))
# mutate into bins
DSM_HARV_df<- DSM_HARV_df %>%
mutate(fct_elevation = cut(HARV_dsmCrop, breaks = 3))
# mutate into bins
DSM_HARV_df<- DSM_HARV_df %>%
mutate(fct_elevation = cut(Elevation, breaks = 3))
# or the tidy way
values(DSM_HARV) %>% summary()
# as usual, ggplot wants dataframes
DSM_HARV_df <- as.data.frame(DSM_HARV, xy = TRUE)
str(DSM_HARV_df)
# change the name of the column to better reflect what it is:
# this isn't in the lesson
names(DSM_HARV_df)[names(DSM_HARV_df) == 'HARV_dsmCrop'] <- 'Elevation'
str(DSM_HARV_df)
# mutate into bins
DSM_HARV_df<- DSM_HARV_df %>%
mutate(fct_elevation = cut(Elevation, breaks = 3))
