geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
coord_sf()
# HARV_DSM <-
#  +   raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
# HARV_DSM_df <- as.data.frame(HARV_DSM, xy = TRUE)
# names(HARV_DSM_df)[names(HARV_DSM_df) == 'HARV_dsmCrop']
#
# HARV_DTM <- raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DTM/HARV_dtmCrop.tif")
# HARV_DTM_df <- as.data.frame(HARV_DTM, xy = TRUE)
#
# HARV_CHM <- HARV_DSM - HARV_DTM
# HARV_CHM_df <- as.data.frame(HARV_CHM, xy = TRUE)
names(HARV_CHM_df)[names(HARV_CHM_df) == 'layer'] <- 'Elevation'
ggplot() +
geom_raster(data = HARV_CHM_df, aes(x = x, y = y, fill = Elevation)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
coord_sf()
#Now subset with cropping operation
HARV_CHM_Cropped <- crop(x = HARV_CHM, y = aoi_boundary_HARV)
HARV_CHM_Cropped_df <- as.data.frame(HARV_CHM_Cropped, xy = TRUE)
#ggplot
ggplot() +
geom_sf(data = st_as_sfc(st_bbox(HARV_CHM)), fill = "green",
color = "green", alpha = .2) +
geom_raster(data = HARV_CHM_Cropped_df,
aes(x = x, y = y, fill = Elevation)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
coord_sf()
names(HARV_CHM_Cropped_df)[names(HARV_CHM_Cropped_df) == 'layer'] <- 'Elevation'
#ggplot
ggplot() +
geom_sf(data = st_as_sfc(st_bbox(HARV_CHM)), fill = "green",
color = "green", alpha = .2) +
geom_raster(data = HARV_CHM_Cropped_df,
aes(x = x, y = y, fill = Elevation)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
coord_sf()
#now plot the cropped images
ggplot() +
geom_raster(data = HARV_CHM_Cropped_df,
aes(x = x, y = y, fill = Elevation)) +
geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
coord_sf()
#In case we need to remake/reload the environment
# HARV_DSM <-
#  +   raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
# HARV_DSM_df <- as.data.frame(HARV_DSM, xy = TRUE)
names(HARV_DSM_df)[names(HARV_DSM_df) == 'HARV_dsmCrop'] <- 'Elevation'
#In case we need to remake/reload the environment
# HARV_DSM <-
#  +   raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
# HARV_DSM_df <- as.data.frame(HARV_DSM, xy = TRUE)
# names(HARV_DSM_df)[names(HARV_DSM_df) == 'HARV_dsmCrop'] <- 'Elevation'
#
# HARV_DTM <- raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DTM/HARV_dtmCrop.tif")
# HARV_DTM_df <- as.data.frame(HARV_DTM, xy = TRUE)
#
HARV_CHM <- HARV_DSM - HARV_DTM
HARV_CHM_df <- as.data.frame(HARV_CHM, xy = TRUE)
# HARV_DSM <-
#  +   raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
# HARV_DSM_df <- as.data.frame(HARV_DSM, xy = TRUE)
# names(HARV_DSM_df)[names(HARV_DSM_df) == 'HARV_dsmCrop'] <- 'Elevation'
#
# HARV_DTM <- raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DTM/HARV_dtmCrop.tif")
# HARV_DTM_df <- as.data.frame(HARV_DTM, xy = TRUE)
#
# HARV_CHM <- HARV_DSM - HARV_DTM
# HARV_CHM_df <- as.data.frame(HARV_CHM, xy = TRUE)
names(HARV_CHM_df)[names(HARV_CHM_df) == 'layer'] <- 'Elevation'
#Now subset with cropping operation
HARV_CHM_Cropped <- crop(x = HARV_CHM, y = aoi_boundary_HARV)
HARV_CHM_Cropped_df <- as.data.frame(HARV_CHM_Cropped, xy = TRUE)
names(HARV_CHM_Cropped_df)[names(HARV_CHM_Cropped_df) == 'layer'] <- 'Elevation'
#now plot the cropped images
ggplot() +
geom_raster(data = HARV_CHM_Cropped_df,
aes(x = x, y = y, fill = Elevation)) +
geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
coord_sf()
#In case we need to remake/reload the environment
# HARV_DSM <-
#  +   raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
# HARV_DSM_df <- as.data.frame(HARV_DSM, xy = TRUE)
# names(HARV_DSM_df)[names(HARV_DSM_df) == 'HARV_dsmCrop'] <- 'Elevation'
#
# HARV_DTM <- raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DTM/HARV_dtmCrop.tif")
# HARV_DTM_df <- as.data.frame(HARV_DTM, xy = TRUE)
#
# HARV_CHM <- HARV_DSM - HARV_DTM
HARV_CHM <- raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/CHM/HARV_chmCrop.tif")
HARV_CHM_df <- as.data.frame(HARV_CHM, xy = TRUE)
names(HARV_CHM_df)[names(HARV_CHM_df) == 'layer'] <- 'Elevation'
#In case we need to remake/reload the environment
HARV_DSM <-
+   raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DSM/HARV_dsmCrop.tif")
HARV_DSM_df <- as.data.frame(HARV_DSM, xy = TRUE)
names(HARV_DSM_df)[names(HARV_DSM_df) == 'HARV_dsmCrop'] <- 'Elevation'
#
# HARV_DTM <- raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DTM/HARV_dtmCrop.tif")
# HARV_DTM_df <- as.data.frame(HARV_DTM, xy = TRUE)
#
# HARV_CHM <- HARV_DSM - HARV_DTM
HARV_CHM <- raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/CHM/HARV_chmCrop.tif")
HARV_CHM_df <- as.data.frame(HARV_CHM, xy = TRUE)
names(HARV_CHM_df)[names(HARV_CHM_df) == 'layer'] <- 'Elevation'
#
aoi_boundary_HARV <- st_read(
+   "data/NEON-DS-Site-Layout-Files/HARV/HarClip_UTMZ18.shp")
HARV_lines <- st_read("data/NEON-DS-Site-Layout-Files/HARV/HARV_roads.shp")
#
country_boundary_US <- st_read(
"data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-Boundary-Dissolved-States.shp") %>%
# +   st_zm()
#
# state_boundary_US <- st_read(
# "data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-State-Boundaries-Census-2014.shp") %>%
# +   st_zm()
## Crop a Raster to a Vector Extent
# Its more efficient to crop a raster to the extent of our study area to reduce file sizes
# Using the Crop() function.
# R will use ht eextent of the spatial object as the cropping boundary
#Need to make sure layers is replaced with elevation in CHM_df layer
ggplot() +
geom_raster(data = HARV_CHM_df, aes(x = x, y = y, fill = Elevation)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
coord_sf()
#
country_boundary_US <- st_read(
"data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-Boundary-Dissolved-States.shp") %>%
# +   st_zm()
#
state_boundary_US <- st_read(
"data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-State-Boundaries-Census-2014.shp") %>%
# +   st_zm()
## Crop a Raster to a Vector Extent
# Its more efficient to crop a raster to the extent of our study area to reduce file sizes
# Using the Crop() function.
# R will use ht eextent of the spatial object as the cropping boundary
#Need to make sure layers is replaced with elevation in CHM_df layer
ggplot() +
geom_raster(data = HARV_CHM_df, aes(x = x, y = y, fill = Elevation)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
coord_sf()
#
aoi_boundary_HARV <- st_read(
+   "data/NEON-DS-Site-Layout-Files/HARV/HarClip_UTMZ18.shp")
#
aoi_boundary_HARV <- st_read( "data/NEON-DS-Site-Layout-Files/HARV/HarClip_UTMZ18.shp")
HARV_lines <- st_read("data/NEON-DS-Site-Layout-Files/HARV/HARV_roads.shp")
#
country_boundary_US <- st_read(
"data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-Boundary-Dissolved-States.shp") %>%
# +   st_zm()
#
state_boundary_US <- st_read(
"data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-State-Boundaries-Census-2014.shp") %>%
# +   st_zm()
## Crop a Raster to a Vector Extent
# Its more efficient to crop a raster to the extent of our study area to reduce file sizes
# Using the Crop() function.
# R will use ht eextent of the spatial object as the cropping boundary
#Need to make sure layers is replaced with elevation in CHM_df layer
ggplot() +
geom_raster(data = HARV_CHM_df, aes(x = x, y = y, fill = Elevation)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
coord_sf()
#
country_boundary_US <- st_read(
"data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-Boundary-Dissolved-States.shp") %>%
+   st_zm()
#
state_boundary_US <- st_read(
"data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-State-Boundaries-Census-2014.shp") %>%
+   st_zm()
library(raster)
library(rgdal)
library(ggplot2)
library(dplyr)
library(terra)
#
country_boundary_US <- st_read(
"data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-Boundary-Dissolved-States.shp") %>%
+   st_zm()
# our first new library in a while
#install.packages("sf")
library(sf)
#
country_boundary_US <- st_read(
"data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-Boundary-Dissolved-States.shp") %>%
+   st_zm()
#
state_boundary_US <- st_read(
"data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-State-Boundaries-Census-2014.shp") %>%
+   st_zm()
#Need to make sure layers is replaced with elevation in CHM_df layer
ggplot() +
geom_raster(data = HARV_CHM_df, aes(x = x, y = y, fill = Elevation)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
coord_sf()
library(terra)
library(sf)
rlang::last_trace()
names(HARV_DSM_df)[names(HARV_DSM_df) == 'HARV_dsmCrop'] <- 'Elevation'
names(HARV_CHM_df)[names(HARV_CHM_df) == 'layer'] <- 'Elevation'
names(HARV_CHM_df)[names(HARV_CHM_df) == 'HARV_chmCrop'] <- 'Elevation'
names(HARV_CHM_df)[names(HARV_CHM_df) == 'HARV_chmCrop'] <- 'Elevation'
#Need to make sure layers is replaced with elevation in CHM_df layer
ggplot() +
geom_raster(data = HARV_CHM_df, aes(x = x, y = y, fill = Elevation)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
coord_sf()
#Now subset with cropping operation
HARV_CHM_Cropped <- crop(x = HARV_CHM, y = aoi_boundary_HARV)
HARV_CHM_Cropped_df <- as.data.frame(HARV_CHM_Cropped, xy = TRUE)
names(HARV_CHM_Cropped_df)[names(HARV_CHM_Cropped_df) == 'layer'] <- 'Elevation'
#this plot will show the full CHM extent (green) is much larger than the
#cropped raster.
ggplot() +
geom_sf(data = st_as_sfc(st_bbox(HARV_CHM)), fill = "green",
color = "green", alpha = .2) +
geom_raster(data = HARV_CHM_Cropped_df,
aes(x = x, y = y, fill = Elevation)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
coord_sf()
names(HARV_CHM_Cropped_df)[names(HARV_CHM_Cropped_df) == 'layer'] <- 'Elevation'
names(HARV_CHM_Cropped_df)[names(HARV_CHM_Cropped_df) == 'HARV_chmCrop'] <- 'Elevation'
#this plot will show the full CHM extent (green) is much larger than the
#cropped raster.
ggplot() +
geom_sf(data = st_as_sfc(st_bbox(HARV_CHM)), fill = "green",
color = "green", alpha = .2) +
geom_raster(data = HARV_CHM_Cropped_df,
aes(x = x, y = y, fill = Elevation)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
coord_sf()
#now plot the cropped images
ggplot() +
geom_raster(data = HARV_CHM_Cropped_df,
aes(x = x, y = y, fill = Elevation)) +
geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
coord_sf()
# Look at the extent of all of the objects:
st_bbox(CHM_HARV)
# Look at the extent of all of the objects:
st_bbox(HARV_CHM)
st_bbox(HARV_CHM_Cropped)
st_bbox(aoi_boundary_HARV)
#Import a new csv containing plot coordinates
HARV_plot_locations <-
read.csv("data/NEON-DS-Site-Layout-Files/HARV/HARV_PlotLocations.csv")
str(HARV_plot_locations)
# check column names to look for spatial data
names(HARV_plot_locations)
# Easting/Northing contain fields containing spatial information
head(HARV_plot_locations$easting)
head(HARV_plot_locations$northing)
# Before we convert to a spatial object, we need to know the CRS
# when we ran line 11, we also have "geodeticDa" and "utmZone"
head(HARV_plot_locations$geodeticDa)
head(HARV_plot_locations$utmZone)
# check crs of HARV points tower
st_crs(HARV_points)
# Create CRS object that we can use to define the CRS of our new sf object when we create it
utm18nCRS <- st_crs(HARV_points)
utm18nCRS
class(utm18nCRS)
# Create CRS object that we can use to define the CRS of our new sf object when we create it
utm18nCRS <- st_crs(HARV_points)
# this shows us the attribute table
# there's only one point
View(HARV_points)
HARV_points <- st_read("data/NEON-DS-Site-Layout-Files/HARV/HARVtower_UTM18N.shp")
# challenge
plot_locations <- st_read("data/NEON-DS-Site-Layout-Files/HARV/PlotLocations_HARV.shp")
# we'll need to make a factor
levels(plot_locations$soilTypeOr)
plot_locations$soilTypeOr <- factor(plot_locations$soilTypeOr)
# we'll need 2 colors
levels(plot_locations$soilTypeOr)
blue_orange <- c("cornflowerblue", "darkorange")
# Add CRS to each object
st_crs(HARV_points)$proj4string
#Check the CRS of the state and country boundary objects:
st_crs(state_boundary_US)$proj4string
## CRS Units - View Object Extent
# first look at the extent of the study site at our tower location
st_bbox(HARV_points)
ggplot() +
geom_sf(data = country_boundary_US, size = 2, color = "gray18") +
geom_sf(data = state_boundary_US, color = "gray40") +
geom_sf(data = HARV_points, shape = 19, color = "purple") +
ggtitle("Map of Contiguous US State Boundaries") +
coord_sf()
# create a boundary layer of the United States to make it look nicer.
# Import US boundary dissolved states
country_boundary_US <- st_read("data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-Boundary-Dissolved-States.shp") %>%
st_zm()
ggplot() +
geom_sf(data = country_boundary_US, size = 2, color = "gray18") +
geom_sf(data = state_boundary_US, color = "gray40") +
geom_sf(data = HARV_points, shape = 19, color = "purple") +
ggtitle("Map of Contiguous US State Boundaries") +
coord_sf()
#Check the CRS of the state and country boundary objects:
st_crs(state_boundary_US)$proj4string
# we will use census data for this portion, read in the following line:
state_boundary_US <- st_read("data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-State-Boundaries-Census-2014.shp") %>%
st_zm()
## CRS Units - View Object Extent
# first look at the extent of the study site at our tower location
st_bbox(HARV_points)
ggplot() +
geom_sf(data = country_boundary_US, size = 2, color = "gray18") +
geom_sf(data = state_boundary_US, color = "gray40") +
geom_sf(data = HARV_points, shape = 19, color = "purple") +
ggtitle("Map of Contiguous US State Boundaries") +
coord_sf()
#Import a new csv containing plot coordinates
HARV_plot_locations <-
read.csv("data/NEON-DS-Site-Layout-Files/HARV/HARV_PlotLocations.csv")
str(HARV_plot_locations)
# check column names to look for spatial data
names(HARV_plot_locations)
# Easting/Northing contain fields containing spatial information
head(HARV_plot_locations$easting)
head(HARV_plot_locations$northing)
# Before we convert to a spatial object, we need to know the CRS
# when we ran line 11, we also have "geodeticDa" and "utmZone"
head(HARV_plot_locations$geodeticDa)
head(HARV_plot_locations$utmZone)
# check crs of HARV points tower
st_crs(HARV_points)
# Create CRS object that we can use to define the CRS of our new sf object when we create it
utm18nCRS <- st_crs(HARV_points)
utm18nCRS
class(utm18nCRS)
HARV_plot_locations_sp <- st_as_sf(HARV_plot_locations,
coords = c("easting", "northing"),
crs = utm18nCRS)
# Check the new CRS to see if correct
st_crs(HARV_plot_locations_sp)
# Now plot the object
ggplot() +
geom_sf(data = HARV_plot_locations_sp) +
ggtitle("Map of Plot Locations")
# Plot extent adding the aoi boundary
ggplot() +
geom_sf(data = aoi_boundary_HARV) +
geom_sf(data = HARV_plot_locations_sp) +
ggtitle("AOI Boundary Plot")
geogCRS <- st_crs(country_boundary_US)
geogCRS
Phenplot_sp_HARV <- st_as_sf(newplot_loc_HARV,
coords = c("decimalLon", "decimalLat"),
crs = geogCRS)
st_crs(Phenplot_sp_HARV)
Phenplot_sp_HARV <- st_as_sf(newplot_loc_HARV,
coords = c("decimalLon", "decimalLat"),
crs = geogCRS)
newplot_loc_HARV <-
read.csv("data/NEON-DS-Site-Layout-Files/HARV/HARV_2NewPhenPlots.csv")
Phenplot_sp_HARV <- st_as_sf(newplot_loc_HARV,
coords = c("decimalLon", "decimalLat"),
crs = geogCRS)
st_crs(Phenplot_sp_HARV)
ggplot() +
geom_sf(data = HARV_plot_locations_sp, color = "orange") +
geom_sf(data = Phenplot_sp_HARV, color = "lightblue") +
ggtitle("Map of All Plot Locations")
View(HARV_plot_locations_sp)
st_bbox(HARV_plot_locations_sp)
CHM_plots_HARVcrop <- crop(x = CHM_HARV, y = HARV_plot_locations_sp)
CHM_plots_HARVcrop <- crop(x = HARV_CHM, y = HARV_plot_locations_sp)
HARVcrop_CHM_plots <- crop(x = HARV_CHM, y = HARV_plot_locations_sp)
HARVcrop_CHM_plots_df <- as.data.frame(HARVcrop_CHM_plots, xy = TRUE)
ggplot() +
geom_raster(data = HARVcrop_CHM_plots_df,
aes(x = x, y = y, fill = HARV_chmCrop)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
geom_sf(data = HARV_plot_locations_sp) +
coord_sf()
new_extent <- ext(732161.2, 732238.7, 4713249, 4713333)
class(new_extent)
# Look at the extent of all of the objects:
st_bbox(HARV_CHM)
st_bbox(HARV_CHM_Cropped)
st_bbox(aoi_boundary_HARV)
st_bbox(HARV_plot_locations_sp)
HARV_CHM_manual_cropped <- crop(x = HARV_CHM, y = new_extent)
new_extent <- ext(732161.2, 732238.7, 4713249, 4713333)
class(new_extent)
HARV_CHM_manual_cropped <- crop(x = HARV_CHM, y = new_extent)
new_extent <- ext(732161.2, 732238.7, 4713249, 4713333)
HARV_CHM_manual_cropped <- crop(x = HARV_CHM, y = new_extent)
HARV_CHM_manual_cropped <- crop(x = HARV_CHM, y = new_extent)
new_extent <- extent(732161.2, 732238.7, 4713249, 4713333)
class(new_extent)
HARV_CHM_manual_cropped <- crop(x = HARV_CHM, y = new_extent)
HARV_CHM_manual_cropped_df <- as.data.frame(HARV_CHM_manual_cropped, xy = TRUE)
ggplot() +
geom_sf(data = aoi_boundary_HARV, color = "blue", fill = NA) +
geom_raster(data = HARV_CHM_manual_cropped_df,
aes(x = x, y = y, fill = HARV_chmCrop)) +
scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
coord_sf()
#extract canopy values located within the aoi_boundary polygon
tree_height <- extract(x = HARV_CHM, y = aoi_boundary_HARV, raw = FALSE)
str(tree_height)
ggplot() +
geom_histogram(data = tree_height, aes(x = HARV_chmCrop)) +
ggtitle("Histogram of CHM Height Values (m)") +
xlab("Tree Height") +
ylab("Frequency of Pixels")
#extract canopy values located within the aoi_boundary polygon
tree_height <- extract(x = HARV_CHM, y = aoi_boundary_HARV, raw = FALSE)
str(tree_height)
#extract canopy values located within the aoi_boundary polygon
tree_height <- extract(x = HARV_CHM, y = aoi_boundary_HARV)
str(tree_height)
#extract canopy values located within the aoi_boundary polygon
tree_height <- extract(x = HARV_CHM, y = aoi_boundary_HARV, raw= FALSE)
#missing dataframe
tree_height_df <- as.data.frame(tree_height, xy = TRUE)
str(tree_height_df)
ggplot() +
geom_histogram(data = tree_height_df, aes(x = HARV_chmCrop)) +
ggtitle("Histogram of CHM Height Values (m)") +
xlab("Tree Height") +
ylab("Frequency of Pixels")
#extract canopy values located within the aoi_boundary polygon
tree_height <- extract(x = HARV_CHM, y = aoi_boundary_HARV, raw= FALSE)
#extract canopy values located within the aoi_boundary polygon
tree_height <- extract(x = HARV_CHM_df, y = aoi_boundary_HARV, raw= FALSE)
#extract canopy values located within the aoi_boundary polygon
tree_height <- extract(x = HARV_CHM, y = aoi_boundary_HARV, raw= FALSE)
str(tree_height_df)
#missing dataframe
tree_height_df <- as.data.frame(tree_height, xy = TRUE)
str(tree_height_df)
ggplot() +
geom_histogram(data = tree_height_df, aes(x = HARV_chmCrop)) +
ggtitle("Histogram of CHM Height Values (m)") +
xlab("Tree Height") +
ylab("Frequency of Pixels")
ggplot() +
geom_histogram(data = tree_height_df, aes(x = Elevation)) +
ggtitle("Histogram of CHM Height Values (m)") +
xlab("Tree Height") +
ylab("Frequency of Pixels")
str(tree_height_df)
#
# HARV_DTM <- raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/DTM/HARV_dtmCrop.tif")
# HARV_DTM_df <- as.data.frame(HARV_DTM, xy = TRUE)
#
# HARV_CHM <- HARV_DSM - HARV_DTM
HARV_CHM <- raster("data/NEON-DS-Airborne-Remote-Sensing/HARV/CHM/HARV_chmCrop.tif")
#extract canopy values located within the aoi_boundary polygon
tree_height <- extract(x = HARV_CHM, y = aoi_boundary_HARV, raw= FALSE)
str(tree_height_df)
#str(tree_height_df)
#missing dataframe
tree_height_df <- as.data.frame(tree_height, xy = TRUE)
str(tree_height_df)
#extract canopy values located within the aoi_boundary polygon
tree_height <- extract(x = HARV_CHM, y = aoi_boundary_HARV)
View(tree_height)
#extract canopy values located within the aoi_boundary polygon
tree_height <- extract(x = HARV_CHM, y = aoi_boundary_HARV, raw = FALSE)
str(tree_height_df)
#extract canopy values located within the aoi_boundary polygon
tree_height <- extract(x = HARV_CHM_manual_cropped, y = aoi_boundary_HARV, raw = FALSE)
#str(tree_height_df)
#missing dataframe
tree_height_df <- as.data.frame(tree_height, xy = TRUE)
str(tree_height_df)
ggplot() +
geom_histogram(data = tree_height, aes(x = HARV_chmCrop)) +
ggtitle("Histogram of CHM Height Values (m)") +
xlab("Tree Height") +
ylab("Frequency of Pixels")
#str(tree_height_df)
#missing dataframe
tree_height_df <- as.data.frame(tree_height, xy = TRUE)
ggplot() +
geom_histogram(data = tree_height_df, aes(x = HARV_chmCrop)) +
ggtitle("Histogram of CHM Height Values (m)") +
xlab("Tree Height") +
ylab("Frequency of Pixels")
#extract canopy values located within the aoi_boundary polygon
tree_height <- extract(x = HARV_CHM, y = aoi_boundary_HARV, raw = FALSE)
#str(tree_height_df)
#missing dataframe
tree_height_df <- as.data.frame(tree_height, xy = TRUE)
str(tree_height_df)
View(Phenplot_sp_HARV)
#extract canopy values located within the aoi_boundary polygon
tree_height <- extract(x = HARV_CHM_Cropped, y = aoi_boundary_HARV, raw = FALSE)
str(tree_height_df)
#str(tree_height_df)
#missing dataframe
tree_height_df <- as.data.frame(tree_height, xy = TRUE)
str(tree_height_df)
